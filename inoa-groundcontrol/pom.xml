<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.inoa</groupId>
		<artifactId>parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>groundcontrol</artifactId>

	<name>INOA :: Ground Control</name>

	<properties>

		<image.graal>ghcr.io/graalvm/native-image:muslib-22.3.2</image.graal>
		<image.curl>docker.io/curlimages/curl:8.1.2</image.curl>
		<image.node>docker.io/library/node:18-slim</image.node>
		<image.repository>ghcr.io/inoa-io</image.repository>
		<image.tag>latest</image.tag>

	</properties>

	<dependencies>

		<!-- micronaut -->
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-runtime</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-management</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-http-server-netty</artifactId>
		</dependency>
		<dependency>
			<groupId>io.kokuwa.micronaut</groupId>
			<artifactId>micronaut-logging</artifactId>
			<scope>runtime</scope>
		</dependency>

	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>

			<!-- configure annotation processors -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${version.org.projectlombok}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-inject-java</artifactId>
							<version>${version.io.micronaut}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-validation</artifactId>
							<version>${version.io.micronaut}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-graal</artifactId>
							<version>${version.io.micronaut}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!-- prepare jar with local classpath -->
			<plugin>
				<groupId>io.micronaut.build</groupId>
				<artifactId>micronaut-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>graalvm-resources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<silent>true</silent>
							<skipDuringIncrementalBuild>true</skipDuringIncrementalBuild>
							<useBaseVersion>false</useBaseVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>io.inoa.groundcontrol.Application</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- create container image -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>docker</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.basedir}/src/main/docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>graal</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<arguments>
								<argument>build</argument>
								<argument>${project.basedir}</argument>
								<argument>--file=${project.build.directory}/Dockerfile</argument>
								<argument>--target=graal</argument>
								<argument>--tag=${image.repository}/groundcontrol:graal</argument>
								<argument>--cache-from=${image.repository}/groundcontrol:graal</argument>
								<argument>--build-arg=BUILDKIT_INLINE_CACHE=1</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>node</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<arguments>
								<argument>build</argument>
								<argument>${project.basedir}</argument>
								<argument>--file=${project.build.directory}/Dockerfile</argument>
								<argument>--target=node</argument>
								<argument>--tag=${image.repository}/groundcontrol:node</argument>
								<argument>--cache-from=${image.repository}/groundcontrol:node</argument>
								<argument>--build-arg=BUILDKIT_INLINE_CACHE=1</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>service</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<arguments >
								<argument>build</argument>
								<argument>${project.basedir}</argument>
								<argument>--file=${project.build.directory}/Dockerfile</argument>
								<argument>--tag=${image.repository}/groundcontrol:${image.tag}</argument>
								<argument>--cache-from=${image.repository}/groundcontrol:${image.tag}</argument>
								<argument>--build-arg=BUILDKIT_INLINE_CACHE=1</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<executable>docker</executable>
					<environmentVariables>
						<DOCKER_BUILDKIT>1</DOCKER_BUILDKIT>
					</environmentVariables>
					<quietLogs>true</quietLogs>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>generate</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.openapitools</groupId>
						<artifactId>openapi-generator-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-fleet-client-for-angular</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
								<configuration>
									<generatorName>typescript-angular</generatorName>
									<modelNameSuffix>""</modelNameSuffix>
									<ignoreFileOverride>${project.basedir}/.openapi-generator-ignore</ignoreFileOverride>
									<inputSpec>${project.basedir}/../inoa-fleet/src/main/resources/openapi/inoa-fleet-api.yaml</inputSpec>
									<output>${project.basedir}/ui/src/gen</output>
									<cleanupOutput>true</cleanupOutput>
								</configuration>
							</execution>
							<execution>
								<id>generate-measurement-client-for-angular</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
								<configuration>
									<generatorName>typescript-angular</generatorName>
									<modelNameSuffix>""</modelNameSuffix>
									<ignoreFileOverride>${project.basedir}/.openapi-generator-ignore</ignoreFileOverride>
									<inputSpec>${project.basedir}/../inoa-measurement/src/main/resources/openapi/inoa-measurement-api.yaml</inputSpec>
									<output>${project.basedir}/ui/src/gen</output>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
