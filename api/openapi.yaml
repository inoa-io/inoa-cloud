openapi: 3.0.3
info:
  title: Inoa Fleet API
  description: Definitions for Inoa Fleet.
  version: ${project.version}
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: inoa.io
    url: https://github.com/inoa-io
servers:
  - url: http://inoa.127.0.0.1.nip.io:8080
  - url: http://inoa.{k3s.ip}.nip.io:8080
    variables:
      k3s.ip:
        default: 127.0.0.1
        description: Your local ip where INOA is running
  - url: https://api.inoa.io
security:
  - Keycloak: []
  - BearerAuth: []
tags:
  - name: tenants
    description: Tenants can be used to divide INOA resources for different groups of interest
  - name: groups
    description: Groups are a logical structure to arrange gateways and their configuration
  - name: gateways
    description: Gateways are representations of IoT devices
  - name: credentials
    description: Credential definitions, types and values
  - name: configuration
    description: Gateway configuration for system setup
  - name: gateway
    description: Resources accessible by the physical gateway.
  - name: properties
    description: Gateway properties.
  - name: remote
    description: Remote control of gateways.
paths:
  /tenants:
    get:
      tags: [tenants]
      summary: Find tenants
      description: Returns all tenants ordered by name.
      operationId: findTenants
      responses:
        200:
          description: Sorted list of tenants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tenant"
        401:
          description: Unauthorized
    post:
      tags: [tenants]
      summary: Create tenant
      description: Create tenant.
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCreate"
      responses:
        201:
          description: Created tenant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        400:
          description: Malformed
        401:
          description: Unauthorized
        409:
          description: Tenant with name already exists
  /tenants/{tenant_id}:
    parameters:
      - $ref: "#/components/parameters/TenantId"
    get:
      tags: [tenants]
      summary: Find tenant
      description: Find tenant by id.
      operationId: findTenant
      responses:
        200:
          description: Tenant found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        401:
          description: Unauthorized
        404:
          description: Tenant not found
    patch:
      tags: [tenants]
      summary: Update tenant
      description: Update tenant name.
      operationId: updateTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantUpdate"
      responses:
        200:
          description: Tenant updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        400:
          description: Malformed
        401:
          description: Unauthorized
        404:
          description: Tenant not found
    delete:
      tags: [tenants]
      summary: Delete tenant
      description: Delete tenant by id.
      operationId: deleteTenant
      responses:
        204:
          description: Tenant deleted
        400:
          description: Default tenant cannot be deleted
        401:
          description: Unauthorized
        404:
          description: Tenant not found
  /groups:
    get:
      tags: [groups]
      summary: Find groups
      description: Returns all groups ordered by name.
      operationId: findGroups
      responses:
        200:
          description: Sorted list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        401:
          description: Unauthorized
    post:
      tags: [groups]
      summary: Create group
      description: Create group.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreate"
      responses:
        201:
          description: Created group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          description: Malformed  or ambiguous tenant
        401:
          description: Unauthorized
        409:
          description: Group with name already exists
  /groups/{group_id}:
    parameters:
      - $ref: "#/components/parameters/GroupId"
    get:
      tags: [groups]
      summary: Find group
      description: Find group by id.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: findGroup
      responses:
        200:
          description: Group found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Group not found
    patch:
      tags: [groups]
      summary: Update group
      description: Update group name.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdate"
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          description: Malformed or ambiguous tenant
        401:
          description: Unauthorized
        404:
          description: Group not found
        409:
          description: Group with name already exists
    delete:
      tags: [groups]
      summary: Delete group
      description: Delete group by id.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: deleteGroup
      responses:
        204:
          description: Group deleted
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Group not found
  /gateways:
    get:
      tags: [gateways]
      summary: Find gateways
      description: Returns all gateways ordered by name.
      operationId: findGateways
      parameters:
        - $ref: "#/components/parameters/PageablePage"
        - $ref: "#/components/parameters/PageableSize"
        - $ref: "#/components/parameters/Sort"
        - name: filter
          description: Search in name. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: isrl
      responses:
        200:
          description: Paged gateway list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayPage"
        400:
          description: Illegal sort, allowed only name,enabled,created,updated
        401:
          description: Unauthorized
    post:
      tags: [gateways]
      summary: Create gateway
      description: Create gateway.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: createGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GatewayCreate"
      responses:
        201:
          description: Gateway created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayDetail"
        400:
          description: Malformed or ambiguous tenant
        401:
          description: Unauthorized
        409:
          description: Gateway with id already exists.
    patch:
      tags: [gateways]
      summary: Update gateway-to-tenant association
      description: Moves the gateway from one tenant to another. One would need to have access grants for the source and the target tenant
      operationId: moveGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                source_tenant_id:
                  $ref: "#/components/schemas/TenantId"
                target_tenant_id:
                  $ref: "#/components/schemas/TenantId"
                gateway_id:
                  $ref: "#/components/schemas/GatewayId"
              required:
                - source_tenant_id
                - target_tenant_id
                - gateway_id
      responses:
        200:
          description: Gateway moved
        401:
          description: Unauthorized
        403:
          description: Issuer is not allowed to do this (e.g. has no grants for the source or target tenant)
        404:
          description: Gateway not found / Tenant not found
  /gateways/{gateway_id}:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags: [gateways]
      summary: Find gateway
      description: Find gateway by id.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: findGateway
      responses:
        200:
          description: Returns gateway.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayDetail"
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Gateway not found
    patch:
      tags: [gateways]
      summary: Update gateway
      description: Update gateway by id.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: updateGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GatewayUpdate"
      responses:
        200:
          description: Gateway updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GatewayDetail"
        400:
          description: Malformed or group not found or ambiguous tenant
        401:
          description: Unauthorized
        404:
          description: Gateway not found
    delete:
      tags: [gateways]
      summary: Delete gateway
      description: Delete gateway by id.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: deleteGateway
      responses:
        204:
          description: Gateway deleted.
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Gateway not found.
  /gateways/{gateway_id}/credentials:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags: [credentials]
      summary: Get credentials
      description: Get credentials for gateway.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: findCredentials
      responses:
        200:
          description: Returns credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Credential"
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Gateway not found
    post:
      tags: [credentials]
      summary: Create credential
      description: Create credential.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: createCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredentialCreate"
      responses:
        201:
          description: Credential created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        400:
          description: Malformed or ambiguous tenant
        401:
          description: Unauthorized
        404:
          description: Gateway not found
        409:
          description: Name for credential already exists
  /gateways/{gateway_id}/credentials/{credential_id}:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
      - $ref: "#/components/parameters/CredentialId"
    get:
      tags: [credentials]
      summary: Find credential
      description: Find credential.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: findCredential
      responses:
        200:
          description: Credential found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Gateway or credential not found
    patch:
      tags: [credentials]
      summary: Update credential
      description: Update credential.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: updateCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredentialUpdate"
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
        400:
          description: Malformed or ambiguous tenant
        401:
          description: Unauthorized
        404:
          description: Gateway or credential not found
        409:
          description: Name for credential already exists
    delete:
      tags: [credentials]
      summary: Delete credential
      description: Delete credential.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: deleteCredential
      responses:
        204:
          description: Credential deleted
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Gateway or credential not found
  /configuration/definition:
    get:
      tags: [configuration]
      summary: Find configuration definitions
      description: Find configurations definitions.
      operationId: findConfigurationDefinitions
      responses:
        200:
          description: Configuration definitions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConfigurationDefinition"
        401:
          description: Unauthorized
  /configuration/definition/{configuration_key}:
    parameters:
      - $ref: "#/components/parameters/ConfigurationKey"
      - $ref: "#/components/parameters/TenantSpecification"
    post:
      tags: [configuration]
      summary: Save configuration definition
      description: Save configuration definition.
      operationId: createConfigurationDefinition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationDefinition"
      responses:
        201:
          description: Configuration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationDefinition"
        401:
          description: Unauthorized
        400:
          description: Malformed or ambiguous tenant
        409:
          description: Key already in use
    delete:
      tags:
        - configuration
      summary: Delete configuration definition
      description: Delete configuration definition.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: deleteConfigurationDefinition
      responses:
        204:
          description: Configuration definition deleted
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Configuration definition not found
  /configuration:
    get:
      tags: [configuration]
      summary: Find configurations
      description: Find configurations on tenant level ordered by key.
      operationId: findConfigurations
      responses:
        200:
          description: Configurations found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Configuration"
        401:
          description: Unauthorized
  /configuration/{configuration_key}:
    parameters:
      - $ref: "#/components/parameters/ConfigurationKey"
    put:
      tags: [configuration]
      summary: Save configuration
      description: Save configuration.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: setConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationSet"
      responses:
        204:
          description: Configuration set
        401:
          description: Unauthorized
        400:
          description: Malformed or ambiguous tenant
        404:
          description: Configuration not found
    delete:
      tags: [configuration]
      summary: Delete configuration
      description: Delete configuration.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: resetConfiguration
      responses:
        204:
          description: Configuration deleted
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Configuration not found.
  /groups/{group_id}/configuration:
    parameters:
      - $ref: "#/components/parameters/GroupId"
    get:
      tags: [configuration]
      summary: Find configuration.
      description: Find configurations on group level ordered by key.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: findConfigurationsByGroup
      responses:
        200:
          description: Configuration found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Configuration"
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Group not found
  /groups/{group_id}/configuration/{configuration_key}:
    parameters:
      - $ref: "#/components/parameters/GroupId"
      - $ref: "#/components/parameters/ConfigurationKey"
    put:
      tags: [configuration]
      summary: Save configuration value
      description: Save configuration value.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: setConfigurationByGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationSet"
      responses:
        204:
          description: Configuration set
        400:
          description: Malformed or ambiguous tenant
        401:
          description: Unauthorized
        404:
          description: Group of configuration key not found
    delete:
      tags: [configuration]
      summary: Delete configuration
      description: Delete configuration.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: resetConfigurationByGroup
      responses:
        204:
          description: Configuration deleted
        400:
          description: Ambiguous tenant. Please specify tenant as query parameter.
        401:
          description: Unauthorized
        404:
          description: Group of configuration key not found
  /gateways/{gateway_id}/configuration:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags: [configuration]
      summary: Find configuration
      description: Find configurations on gateway level ordered by key.
      operationId: findConfigurationsByGateway
      responses:
        200:
          description: Configuration found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Configuration"
        401:
          description: Unauthorized
        404:
          description: Group not found
  /gateways/{gateway_id}/configuration/{configuration_key}:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
      - $ref: "#/components/parameters/ConfigurationKey"
    put:
      tags: [configuration]
      summary: Save configuration value
      description: Save configuration value.
      parameters:
        - $ref: "#/components/parameters/TenantSpecification"
      operationId: setConfigurationByGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationSet"
      responses:
        204:
          description: Configuration set
        400:
          description: Malformed or ambiguous tenant
        401:
          description: Unauthorized
        404:
          description: Gateway of configuration key not found
    delete:
      tags: [configuration]
      summary: Delete configuration
      description: Delete configuration.
      operationId: resetConfigurationByGateway
      responses:
        204:
          description: Configuration deleted
        401:
          description: Unauthorized
        404:
          description: Gateway of configuration key not found
  /gateway:
    post:
      tags: [gateway]
      summary: Register gateway
      description: Self register as gateway.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        204:
          description: Gateway registered
        400:
          description: Malformed
        409:
          description: Gateway already registered
  /gateway/configuration:
    get:
      tags: [gateway]
      summary: Get gateway configuration
      description: Get gateway configuration.
      operationId: getConfiguration
      responses:
        200:
          description: Configuration for gateway
          content:
            application/json:
              schema:
                type: string
                additionalProperties: {}
        401:
          description: Unauthorized
  /gateway/properties:
    get:
      tags: [properties]
      summary: Get gateway properties
      description: TODO
      operationId: getProperties
      responses:
        200:
          description: Properties for gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Properties"
        401:
          description: Unauthorized
    put:
      tags: [properties]
      summary: Set multiple gateway properties.
      description: TODO
      operationId: setProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Properties"
      responses:
        200:
          description: Properties for gateway after manipulation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Properties"
        401:
          description: Unauthorized
  /gateway/properties/{key}:
    parameters:
      - name: key
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/PropertyKey"
    put:
      tags: [properties]
      summary: Set gateway property
      description: Set gateway property.
      operationId: setProperty
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/PropertyValue"
      responses:
        204:
          description: Property updated
        401:
          description: Unauthorized
    delete:
      tags: [properties]
      summary: Delete gateway property
      description: Delete gateway property.
      operationId: deleteProperty
      responses:
        204:
          description: Property deleted
        401:
          description: Unauthorized
        404:
          description: Key not found
  /gateways/{gateway_id}/rpc:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    post:
      tags: [remote]
      summary: Send RPC commands.
      description: Send RPC commands.
      operationId: sendRpcCommand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RpcCommand"
      responses:
        200:
          description: RPC command response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RpcResponse"
        401:
          description: Unauthorized

  /thing-types:
    get:
      tags:
        - thingTypes
      parameters:
        - $ref: "#/components/parameters/PageablePage"
        - $ref: "#/components/parameters/PageableSize"
        - $ref: "#/components/parameters/Sort"
        - name: name_filter
          description: Search in name. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: DZG*
        - name: reference_filter
          description: Search matching reference name. Is case sensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: dvh4013
      summary: Find thing types.
      description: Searches for thing types.
      operationId: findThingTypes
      responses:
        200:
          description: Thing types found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingTypePage"
        401:
          description: Unauthorized.
        404:
          description: No matching thing types found.
    post:
      tags:
        - thingTypes
      summary: Create thing type.
      description: Creates a new thing type.
      operationId: createThingType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingTypeCreate"
      responses:
        201:
          description: Thing type created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingType"
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        409:
          description: Thing type already present.

  /thing-types/{thing_type_id}:
    parameters:
      - $ref: "#/components/parameters/ThingTypeId"
    get:
      tags:
        - thingTypes
      summary: Find Thing type.
      description: return a single thing type
      operationId: findThingType
      responses:
        200:
          description: Thing type found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingType"
        401:
          description: Unauthorized.
        404:
          description: Thing Type not found.
    post:
      tags:
        - thingTypes
      summary: Update Thing type.
      description: Updates existing thing type.
      operationId: updateThingType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingTypeUpdate"
      responses:
        200:
          description: Thing type updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingType"
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        404:
          description: Thing type not found.
    delete:
      tags:
        - thingTypes
      summary: Delete thing type.
      description: Deletes a thing type and corresponding things.
      operationId: deleteThingType
      responses:
        204:
          description: Thing type deleted.
        401:
          description: Unauthorized.
        404:
          description: Thing type not found.

  /things:
    get:
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/PageablePage"
        - $ref: "#/components/parameters/PageableSize"
        - $ref: "#/components/parameters/Sort"
        - name: filter
          description: Search in name. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 10
            example: dvh
      summary: Find things.
      description: Returns all things ordered by name.
      operationId: findThings
      responses:
        200:
          description: Page with thing types.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingPage"
        401:
          description: Unauthorized.
        404:
          description: No matching things found.
    post:
      tags:
        - things
      summary: Create thing.
      description: Creates a new thing where we collect data from.
      operationId: createThing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingCreate"
      responses:
        201:
          description: Thing created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thing"
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        409:
          description: Thing already exists.

  /things/{thing_id}:
    parameters:
      - $ref: "#/components/parameters/ThingId"
    get:
      tags:
        - things
      summary: Find Thing.
      description: Find thing by its Id.
      operationId: findThing
      responses:
        200:
          description: Thing found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thing"
        401:
          description: Unauthorized.
        404:
          description: Thing not found.
    put:
      tags:
        - things
      summary: Update Thing.
      description: Updates an existing thing.
      operationId: updateThing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingUpdate"
      responses:
        200:
          description: Thing updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thing"
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        404:
          description: Thing not found.
    delete:
      tags:
        - things
      summary: Delete thing.
      description: Deletes an existing thing.
      operationId: deleteThing
      responses:
        204:
          description: Thing deleted.
        401:
          description: Unauthorized.
        404:
          description: Thing type not found.

  /gateways/{gateway_id}/things:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags:
        - things
      parameters:
        - $ref: "#/components/parameters/PageablePage"
        - $ref: "#/components/parameters/PageableSize"
        - $ref: "#/components/parameters/Sort"
        - name: name_filter
          description: Search in name. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: DZG*
        - name: reference_filter
          description: Search matching reference name. Is case sensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: dvh4013
      summary: Find all things for a gateway.
      description: Returns all things.
      operationId: findThingsByGatewayId
      responses:
        200:
          description: Page with thing types.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingPage"
        401:
          description: Unauthorized.
        404:
          description: No matching things found.

  /gateways/{gateway_id}/things/upload:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags:
        - things
      summary: Sync configuration to gateway.
      description: Uploads the things configuration to the given gateway
      operationId: syncConfigToGateway
      responses:
        204:
          description: accepted sync request.
        401:
          description: Unauthorized.
        404:
          description: Gateway does not exist.

  /gateways/{gateway_id}/things/upload-sequential:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags:
        - things
      summary: Sync configuration sequentially to gateway.
      description: Uploads the things configuration to the given gateway sequentially.
      operationId: syncConfigToGatewaySequential
      responses:
        204:
          description: accepted sync request.
        401:
          description: Unauthorized.
        404:
          description: The given gateway does not exist.

  /gateways/{gateway_id}/things/json:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags:
        - things
      summary: Downloads things as JSON configuration.
      description: Downloads the thing configuration of the given gateway as JSON string.
      operationId: downloadConfigToGateway
      responses:
        200:
          description: json with thing config.
          content:
            application/json:
              schema:
                type: object
        401:
          description: Unauthorized.
        404:
          description: Gateway does not exist.

  /gateways/{gateway_id}/things/json-legacy:
    parameters:
      - $ref: "#/components/parameters/GatewayId"
    get:
      tags:
        - things
      summary: Downloads things as JSON configuration in legacy format (OS version <0.4.0)
      description: Downloads the thing configuration of the given gateway as JSON string in legacy format (OS version <0.4.0).
      operationId: downloadConfigToGatewayLegacy
      responses:
        200:
          description: json with thing config.
          content:
            application/json:
              schema:
                type: object
        401:
          description: Unauthorized.
        404:
          description: Gateway does not exist.

components:
  schemas:
    Timestamp:
      description: Common timestamp for created/updated timestamps.
      type: string
      format: date-time
      example: 2021-01-01T00:00:00
    Id:
      description: Id as technical reference (never changes).
      type: string
      format: uuid
      example: 00000000-0000-0000-0000-000000000000
    Enabled:
      description: Flag if enabled or not.
      type: boolean
      default: true
      example: true

    ###
    ### Group
    ###

    GroupName:
      description: Name of a group.
      type: string
      minLength: 3
      maxLength: 20
      pattern: ^[a-zA-Z0-9\-]*$
      example: production
    Group:
      description: Group with fields.
      properties:
        group_id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/GroupName"
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
      required:
        - group_id
        - name
        - created
        - updated
    GroupCreate:
      description: Group to create.
      type: object
      properties:
        group_id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/GroupName"
      required:
        - name
    GroupUpdate:
      description: Group to update.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/GroupName"

    ###
    ### Tenant
    ###

    TenantName:
      description: Name of a tenant.
      type: string
      minLength: 3
      maxLength: 100
      pattern: ^[a-zA-Z0-9\-\s]*$
      example: GrayC
    Tenant:
      description: Representation of a tenant.
      properties:
        tenant_id:
          $ref: "#/components/schemas/TenantId"
        name:
          $ref: "#/components/schemas/TenantName"
        enabled:
          description: Is tenant enabled
          type: boolean
        gateway_id_pattern:
          description: Regular expression to force specific gateway IDs for this tenant
          type: string
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
        deleted:
          $ref: "#/components/schemas/Timestamp"
      required:
        - tenant_id
        - name
        - enabled
        - gateway_id_pattern
        - created
        - updated
    TenantCreate:
      description: Tenant to create.
      type: object
      properties:
        tenant_id:
          $ref: "#/components/schemas/TenantId"
        name:
          $ref: "#/components/schemas/TenantName"
        enabled:
          description: Is tenant enabled
          type: boolean
        gateway_id_pattern:
          description: Regular expression to force specific gateway IDs for this tenant
          type: string
      required:
        - tenant_id
        - name
        - enabled
        - gateway_id_pattern
    TenantUpdate:
      description: Group to update.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/TenantName"
        enabled:
          description: Is tenant enabled
          type: boolean
        gateway_id_pattern:
          description: Regular expression to force specific gateway IDs for this tenant
          type: string
    TenantId:
      description: Id as tenant reference.
      type: string
      minLength: 1
      maxLength: 30
      example: inoa

    ###
    ### Gateway
    ###

    GatewayId:
      description: Id as technical reference (never changes).
      type: string
      minLength: 4
      maxLength: 20
      pattern: ^[A-Z][A-Z0-9\-_]{3,19}$
      example: ISRL01-E0E2E6BCBAE4
    GatewayName:
      description: Human friendly description (can change).
      type: string
      maxLength: 100
      example: Some gateway name
    GatewayGroups:
      description: Ids of groups where gateway is member.
      type: array
      items:
        $ref: "#/components/schemas/Id"
      uniqueItems: true
      example:
        - 00000000-0000-0000-0000-000000000000
    Gateway:
      description: Gateway with common fields.
      properties:
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        name:
          $ref: "#/components/schemas/GatewayName"
        enabled:
          $ref: "#/components/schemas/Enabled"
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
        status:
          $ref: "#/components/schemas/GatewayStatus"
      required:
        - gateway_id
        - enabled
        - created
        - updated
    GatewayPage:
      description: Page for gateway list.
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: "#/components/schemas/Gateway"
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          example: 1
      required:
        - content
        - total_size

      example:
        content:
          - gateway_id: GW01-E0E2E6BCBAE1
            name: Gateway One
            enabled: true
            created: 2021-01-01T12:00:00Z
            updated: 2021-01-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2021-01-02T12:00:00Z
          - gateway_id: GW02-E0E2E6BCBAE2
            name: Gateway Two
            enabled: true
            created: 2021-02-01T12:00:00Z
            updated: 2021-02-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2021-02-02T12:00:00Z
          - gateway_id: GW03-E0E2E6BCBAE3
            name: Gateway Three
            enabled: false
            created: 2021-03-01T12:00:00Z
            updated: 2021-03-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2021-03-02T12:00:00Z
          - gateway_id: GW04-E0E2E6BCBAE4
            name: Gateway Four
            enabled: true
            created: 2021-04-01T12:00:00Z
            updated: 2021-04-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2021-04-02T12:00:00Z
          - gateway_id: GW05-E0E2E6BCBAE5
            name: Gateway Five
            enabled: true
            created: 2021-05-01T12:00:00Z
            updated: 2021-05-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2021-05-02T12:00:00Z
          - gateway_id: GW06-E0E2E6BCBAE6
            name: Gateway Six
            enabled: false
            created: 2021-06-01T12:00:00Z
            updated: 2021-06-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2021-06-02T12:00:00Z
          - gateway_id: GW07-E0E2E6BCBAE7
            name: Gateway Seven
            enabled: true
            created: 2021-07-01T12:00:00Z
            updated: 2021-07-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2021-07-02T12:00:00Z
          - gateway_id: GW08-E0E2E6BCBAE8
            name: Gateway Eight
            enabled: true
            created: 2021-08-01T12:00:00Z
            updated: 2021-08-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2021-08-02T12:00:00Z
          - gateway_id: GW09-E0E2E6BCBAE9
            name: Gateway Nine
            enabled: false
            created: 2021-09-01T12:00:00Z
            updated: 2021-09-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2021-09-02T12:00:00Z
          - gateway_id: GW10-E0E2E6BCBAEA
            name: Gateway Ten
            enabled: true
            created: 2021-10-01T12:00:00Z
            updated: 2021-10-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2021-10-02T12:00:00Z
          - gateway_id: GW11-E0E2E6BCBAEB
            name: Gateway Eleven
            enabled: true
            created: 2021-11-01T12:00:00Z
            updated: 2021-11-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2021-11-02T12:00:00Z
          - gateway_id: GW12-E0E2E6BCBAEC
            name: Gateway Twelve
            enabled: false
            created: 2021-12-01T12:00:00Z
            updated: 2021-12-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2021-12-02T12:00:00Z
          - gateway_id: GW13-E0E2E6BCBAED
            name: Gateway Thirteen
            enabled: true
            created: 2022-01-01T12:00:00Z
            updated: 2022-01-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2022-01-02T12:00:00Z
          - gateway_id: GW14-E0E2E6BCBAEE
            name: Gateway Fourteen
            enabled: false
            created: 2022-02-01T12:00:00Z
            updated: 2022-02-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2022-02-02T12:00:00Z
          - gateway_id: GW15-E0E2E6BCBAEF
            name: Gateway Fifteen
            enabled: true
            created: 2022-03-01T12:00:00Z
            updated: 2022-03-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2022-03-02T12:00:00Z
          - gateway_id: GW16-E0E2E6BCBAF0
            name: Gateway Sixteen
            enabled: true
            created: 2022-04-01T12:00:00Z
            updated: 2022-04-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2022-04-02T12:00:00Z
          - gateway_id: GW17-E0E2E6BCBAF1
            name: Gateway Seventeen
            enabled: false
            created: 2022-05-01T12:00:00Z
            updated: 2022-05-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2022-05-02T12:00:00Z
          - gateway_id: GW18-E0E2E6BCBAF2
            name: Gateway Eighteen
            enabled: true
            created: 2022-06-01T12:00:00Z
            updated: 2022-06-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2022-06-02T12:00:00Z
          - gateway_id: GW19-E0E2E6BCBAF3
            name: Gateway Nineteen
            enabled: false
            created: 2022-07-01T12:00:00Z
            updated: 2022-07-02T12:00:00Z
            status:
              mqtt:
                connected: false
                timestamp: 2022-07-02T12:00:00Z
          - gateway_id: GW20-E0E2E6BCBAF4
            name: Gateway Twenty
            enabled: true
            created: 2022-08-01T12:00:00Z
            updated: 2022-08-02T12:00:00Z
            status:
              mqtt:
                connected: true
                timestamp: 2022-08-02T12:00:00Z
        total_size: 20

    GatewayDetail:
      description: Gateway with detailed fields.
      properties:
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        name:
          $ref: "#/components/schemas/GatewayName"
        enabled:
          $ref: "#/components/schemas/Enabled"
        group_ids:
          $ref: "#/components/schemas/GatewayGroups"
        properties:
          description: Properties set by gateway.
          type: string
          maxLength: 100
          additionalProperties:
            type: string
            maxLength: 1000
          example:
            test-a: this-is-a
            test-b: this-is-b
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
      required:
        - gateway_id
        - enabled
        - group_ids
        - properties
        - created
        - updated
    GatewayCreate:
      description: Gateway to create.
      type: object
      properties:
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        name:
          $ref: "#/components/schemas/GatewayName"
        enabled:
          $ref: "#/components/schemas/Enabled"
        group_ids:
          $ref: "#/components/schemas/GatewayGroups"
      required:
        - gateway_id
    GatewayUpdate:
      description: Gateway to update.
      properties:
        name:
          $ref: "#/components/schemas/GatewayName"
        enabled:
          $ref: "#/components/schemas/Enabled"
        group_ids:
          $ref: "#/components/schemas/GatewayGroups"
    GatewayStatus:
      description: Gateway status
      properties:
        mqtt:
          $ref: "#/components/schemas/GatewayMqttStatus"
    GatewayMqttStatus:
      description: Gateway status
      properties:
        connected:
          description: connection status
          type: boolean
          example: true
        timestamp:
          $ref: "#/components/schemas/Timestamp"

    ###
    ### Credential
    ###

    CredentialName:
      description: Name to identify credential.
      type: string
      minLength: 3
      maxLength: 32
      pattern: ^[a-zA-Z0-9\-]*$
      example: registry
    CredentialType:
      description: Types of supported credentials.
      type: string
      enum:
        - psk
        - rsa
    CredentialValue:
      description: Value for credential.
      type: string
      format: binary
      example: MTIzNDU2Nzg5MEFCQw==
    Credential:
      properties:
        credential_id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/CredentialName"
        enabled:
          $ref: "#/components/schemas/Enabled"
        type:
          $ref: "#/components/schemas/CredentialType"
        value:
          $ref: "#/components/schemas/CredentialValue"
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
      required:
        - credential_id
        - name
        - enabled
        - type
        - created
        - updated
    CredentialCreate:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/CredentialName"
        enabled:
          $ref: "#/components/schemas/Enabled"
        type:
          $ref: "#/components/schemas/CredentialType"
        value:
          $ref: "#/components/schemas/CredentialValue"
      required:
        - name
        - type
        - value
    CredentialUpdate:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/CredentialName"
        enabled:
          $ref: "#/components/schemas/Enabled"

    ###
    ### Configuration
    ###

    ConfigurationKey:
      description: Key for configuration.
      type: string
      minLength: 3
      maxLength: 48
      pattern: ^[a-zA-Z0-9\-\.\_]*$
      example: kokuwa
    ConfigurationType:
      description: Possible types of configuration values.
      enum:
        - INTEGER
        - BOOLEAN
        - STRING
        - URL
    ConfigurationDescription:
      description: Describes a configuration.
      type: string
      maxLength: 200
    ConfigurationDefinition:
      description: Defines a configuration.
      type: object
      properties:
        key:
          $ref: "#/components/schemas/ConfigurationKey"
        type:
          $ref: "#/components/schemas/ConfigurationType"
        description:
          $ref: "#/components/schemas/ConfigurationDescription"
      discriminator:
        propertyName: type
        mapping:
          INTEGER: "#/components/schemas/ConfigurationDefinitionInteger"
          BOOLEAN: "#/components/schemas/ConfigurationDefinitionBoolean"
          STRING: "#/components/schemas/ConfigurationDefinitionString"
          URL: "#/components/schemas/ConfigurationDefinitionUrl"
      required:
        - key
        - type
    ConfigurationDefinitionBoolean:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConfigurationDefinition"
    ConfigurationDefinitionUrl:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConfigurationDefinition"
    ConfigurationDefinitionInteger:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConfigurationDefinition"
        - properties:
            minimum:
              type: integer
              format: int32
            maximum:
              type: integer
              format: int32
    ConfigurationDefinitionString:
      type: object
      allOf:
        - $ref: "#/components/schemas/ConfigurationDefinition"
        - properties:
            minLength:
              type: integer
              format: int32
              minimum: 1
            maxLength:
              type: integer
              format: int32
              maximum: 1000
            pattern:
              type: string
              maxLength: 1000
    ConfigurationValue:
      type: object
    ConfigurationSet:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/ConfigurationValue"
      required:
        - value
    Configuration:
      description: Defines a configuration.
      type: object
      properties:
        definition:
          $ref: "#/components/schemas/ConfigurationDefinition"
        value:
          $ref: "#/components/schemas/ConfigurationValue"
      required:
        - definition
        - value
    PropertyKey:
      type: string
      pattern: ^[a-z0-9_\-\.]{2,100}$
      example: test-key
    PropertyValue:
      type: string
      maxLength: 1000
      example: test-value
    Properties:
      type: string
      additionalProperties:
        type: string
      example:
        test-a: this-is-a
        test-b: this-is-b
    Register:
      description: Contains all informations needed to create a new gateway.
      properties:
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        credential_type:
          $ref: "#/components/schemas/CredentialType"
        credential_value:
          $ref: "#/components/schemas/CredentialValue"
      required:
        - gateway_id
        - credential_type
        - credential_value
    CloudEventType:
      description: Subject for cloud events.
      type: string
      enum:
        - io.inoa.log.emitted
        - io.inoa.measurement.telemetry
      example: io.inoa.log.emitted

    LogEvent:
      description: Log event.
      type: object
      properties:
        tag:
          description: Log tag
          type: string
          example: METERING
        level:
          description: Log level
          type: integer
          format: int32
          minimum: 0
          maximum: 5
          example: 0
        time:
          description: Log time
          type: integer
          format: int64
          minimum: 0
          example: 123456789
        msg:
          description: Log message
          type: string
          example: OK
      required:
        - tag
        - level
        - time
        - msg
      example:
        tag: METERING
        level: 0
        time: 1636116540627
        msg: OK

    RpcCommand:
      description: Remote procedure call command
      type: object
      properties:
        id:
          description: ID of the command
          type: string
          example: 1
        method:
          description: TODO
          type: string
          example: metering.rs485.frame
        params:
          description: Parameters of the command as JSON object
          type: object
          example: {uart: 1, frame: \"1603000D0004D6ED\"}
      required:
        - method
    RpcResponse:
      description: Remote procedure call response
      type: object
      properties:
        id:
          description: ID of the command
          type: string
          example: 1
        error:
          description: Error response
          type: object
          properties:
            code:
              description: Error code
              type: integer
              example: -32602
            message:
              description: Error message
              type: string
              example: Property "id" is mandatory
        result:
          description: Result of the command as JSON object
          type: object
          example: [urn:shellyplug-s:483FDA1D3A03:status, urn:dvh4013:33011408:0x0002]
      required:
        - id
    ThingTypeId:
      description: Id as technical reference (never changes).
      type: string
      pattern: ^[a-zA-Z0-9\-\_]{1,64}$
      example: dzg_dvh4013
    Name:
      description: Name.
      type: string
    Category:
      description: Category.
      type: string

    ###
    ### Thing Type
    ###

    ThingType:
      description: User with fields.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ThingTypeId"
        name:
          $ref: "#/components/schemas/Name"
        category:
          $ref: "#/components/schemas/Category"
        json_schema:
          description: json_schema
          type: object
          additionalProperties: {}
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        channels:
          type: array
          items:
            $ref: "#/components/schemas/ThingTypeChannel"
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
      required:
        - id
        - name
        - created
        - updated
    ThingTypePage:
      description: Page for thing types.
      type: object
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: "#/components/schemas/ThingType"
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          example: 0
      required:
        - content
        - total_size
    ThingTypeCreate:
      description: User to create.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        category:
          $ref: "#/components/schemas/Category"
        thing_type_id:
          $ref: "#/components/schemas/ThingTypeId"
        json_schema:
          description: json_schema
          type: object
          additionalProperties: {}
      required:
        - name
    ThingTypeUpdate:
      description: User to update.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        category:
          $ref: "#/components/schemas/Category"
        thing_type_id:
          $ref: "#/components/schemas/ThingTypeId"
        json_schema:
          description: json_schema
          type: object
          additionalProperties: {}
      required:
        - name
    ThingTypeChannel:
      description: Thing Type Channel with fields.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        key:
          type: string
          example: power
          description: key for the channel type
        name:
          $ref: "#/components/schemas/Name"
        description:
          type: string
          example: 1-0:1.8.0*255
          description: description for the channel type
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
      required:
        - id
        - name
        - created
        - updated

    ThingTypeChannelCreate:
      description: Thing Type Channel with fields.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        key:
          type: string
          example: power
          description: key for the channel type
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyDefinition"
      required:
        - name

    ###
    ### Thing
    ###

    ThingPage:
      description: Page for thing types.
      type: object
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: "#/components/schemas/Thing"
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          example: 0
      required:
        - content
        - total_size
    Thing:
      description: Thing with fields.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/Name"
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        thing_type_id:
          description: thing_type_id
          type: string
          pattern: ^[a-zA-Z0-9\-\_]{1,64}$
          example: dzg_dvh4013
        config:
          description: config
          additionalProperties: {}
        created:
          $ref: "#/components/schemas/Timestamp"
        updated:
          $ref: "#/components/schemas/Timestamp"
      required:
        - id
        - name
        - created
        - updated
    ThingCreate:
      description: Thing to create.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        thing_type_id:
          description: External thing type id
          type: string
          pattern: ^[a-zA-Z0-9\-\_]{1,64}$
          example: dzg_dvh4013
        config:
          description: config
          additionalProperties: {}
      required:
        - name
        - thing_type_id
    ThingUpdate:
      description: Thing to update.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        gateway_id:
          $ref: "#/components/schemas/GatewayId"
        thing_type_id:
          description: External thing type id
          type: string
          pattern: ^[a-zA-Z0-9\-\_]{1,64}$
          example: dzg_dvh4013
        config:
          description: config
          additionalProperties: {}
      required:
        - name
        - thing_type_id
    ThingChannel:
      description: Thing channel to create.
      type: object
      properties:
        key:
          type: string
          example: power
          description: key for the channel
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"
      required:
        - key

    ###
    ### Common
    ###

    PropertyDefinition:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        key:
          type: string
          example: serialId
          description: key for the property
        input_type:
          type: string
          example: text
          enum: [text, number]
          description: input type for the frontend
    Property:
      type: object
      properties:
        key:
          $ref: "#/components/schemas/Name"
        value:
          type: object
          example: 1234567
          description: value for the property
    Datapoint:
      type: object
      properties:
        id:
          description: Unique identifier
          type: string
          example: urn:dvh4013:33011408:0x4000
        name:
          description: Readable name
          type: string
          example: work_in
        enabled:
          description: Is datapoint enabled
          type: boolean
        interval:
          description: Poll interval in Seconds
          type: integer
          format: int32
          minimum: 0
        type:
          description: Poll type
          type: string
          enum:
            - RS485
            - S0
            - HTTP_GET
          example: RS485
        interface:
          description: Interface to poll
          type: integer
          format: int32
          minimum: 0
          example: 1
        timeout:
          description: Polling timeout
          type: integer
          format: int32
          minimum: 0
          example: 1000
        frame:
          description: RS485 frame as hex string
          type: string
          pattern: ^[a-fA-F0-9]+$
          example: 1603000D0004D6ED
        uri:
          description: URI to poll
          type: string
          format: uri
          example: http://192.168.178.25/status
      required:
        - id
        - name
        - enabled
        - interval
        - type

    ###
    ### Events
    ###

    CloudEventSubject:
      description: Subject for cloud events.
      type: string
      enum:
        - telemetry
      example: telemetry

    ###
    ### Telemetry
    ###

    Telemetry:
      description: Inoa payload.
      type: object
      properties:
        tenant_id:
          description: Id of tenant.
          type: string
          example: inoa
        gateway_id:
          description: Id of gateway @ tenant.
          type: string
          example: GW-00001
        urn:
          description: TODO
          type: string
          pattern: urn:(?<deviceType>[a-zA-Z0-9\-]{2,32}):(?<deviceId>[a-zA-Z0-9\-]{2,36}):(?<sensor>[a-zA-Z0-9_\-\:*]{2,64})
          example: urn:dvh4013:12314214:1-0:1.8.0*255
        device_type:
          description: TODO
          type: string
          pattern: ^[a-zA-Z0-9\-]{2,32}$
          example: dvh4013
        device_id:
          description: TODO
          type: string
          pattern: ^[a-zA-Z0-9\-]{2,36}$
          example: 12314214
        sensor:
          description: TODO
          type: string
          pattern: ^[a-zA-Z0-9\-\:*]{2,64}$
          example: 1-0:1.8.0*255
        timestamp:
          description: Timestamp of measurement value.
          type: string
          format: date-time
          example: 2021-09-09T06:46:59
        value:
          description: Value of measurement.
          type: number
          format: double
          example: 99.42
        ext:
          description: Additional stuff describing this measurement.
          type: string
          maxLength: 100
          additionalProperties:
            type: string
            maxLength: 100
          example:
            obis-1: 0815
      required:
        - tenant_id
        - gateway_id
        - urn
        - device_type
        - device_id
        - sensor
        - timestamp
        - value
      example:
        tenant_id: 123
        gateway_id: 345
        urn: urn:dvh4013:12314214:0x4001
        device_type: dvh4013
        device_id: 12314214
        sensor: 0x4001
        timestamp: 2021-09-09T06:46:59
        value: 99.42
        metadata:
          obis: 1-0:1.8.0*255

  parameters:
    PageablePage:
      description: Page number for pagination.
      name: page
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 0
    PageableSize:
      description: Page size for pagination.
      name: size
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
      example: 50
    Sort:
      description: Sorting.
      name: sort
      in: query
      schema:
        type: array
        items:
          type: string
          pattern: ^[a-zA-Z_]{2,10}(,(asc|desc|ASC|DESC))?$
    GroupId:
      name: group_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    GatewayId:
      name: gateway_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/GatewayId"
    CredentialId:
      name: credential_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    SecretId:
      name: secret_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    ConfigurationKey:
      name: configuration_key
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ConfigurationKey"
    TenantId:
      name: tenant_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/TenantId"
    TenantSpecification:
      name: tenant_specification
      description: If an issuer has multiple tenants granted, a specific tenant has to be given, so the method applies to only one tenant
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/TenantId"
      example: 0
    ThingTypeId:
      name: thing_type_id
      in: path
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z0-9\-\_]{1,64}$
        example: dzg_dvh4013

    ThingId:
      name: thing_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Id"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    Keycloak:
      type: openIdConnect
      openIdConnectUrl: http://keycloak.127.0.0.1.nip.io:8080/realms/inoa/.well-known/openid-configuration
