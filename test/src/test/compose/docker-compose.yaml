version: '2.3'
services:

  ###
  ### Infrastructure
  ###

  postgres:
    image: postgres:${docker.postgres.version}
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changeMe
    volumes:
      - ${project.build.directory}/compose/postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]

  keycloak:
    hostname: keycloak
    image: cnpm/keycloak-test
    build: ${project.build.directory}/compose/keycloak
    healthcheck:
      test: curl -sf http://localhost:8080/realms/inoa/protocol/openid-connect/certs

  zookeeper:
    image: confluentinc/cp-zookeeper:${docker.kafka.version}
    environment:
      - ZOOKEEPER_CLIENT_PORT=2182
    healthcheck:
      test: curl -sf http://zookeeper:8080/commands/stats

  kafka:
    image: confluentinc/cp-kafka:${docker.kafka.version}
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2182
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093,BROKER://0.0.0.0:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=BROKER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=BROKER://kafka:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: cat < /dev/null > /dev/tcp/kafka/9092
    depends_on:
      zookeeper:
        condition: service_started

  envoy:
    hostname: envoy
    image: envoyproxy/envoy-alpine:${docker.envoy.version}
    healthcheck:
      test: wget --spider --quiet http://localhost:8090 || exit 1
    volumes:
      - ${project.build.directory}/compose/envoy/config.yaml:/etc/envoy/envoy.yaml


  ###
  ### Hono
  ###

  #  hono-service-auth:
  #    image: eclipse/hono-service-auth-quarkus-native:${docker.hono.version}
  #    env_file: ${project.build.directory}/compose/hono/base.env
  #    environment:
  #      - HONO_AUTH_AMQP_INSECUREPORTENABLED=true
  #      - HONO_AUTH_AMQP_INSECUREPORTBINDADDRESS=0.0.0.0
  #      - HONO_AUTH_AMQP_INSECUREPORT=5672
  #      - HONO_AUTH_SVC_PERMISSIONSPATH=/etc/hono/permissions.json
  #      - HONO_AUTH_SVC_SUPPORTEDSASLMECHANISMS=PLAIN
  #      - HONO_AUTH_SVC_SIGNING_KEYPATH=/etc/hono/auth-server-key.pem
  #      - HONO_AUTH_SVC_SIGNING_CERTPATH=/etc/hono/auth-server-cert.pem
  #    volumes:
  #      - ${project.build.directory}/compose/hono/auth-server-cert.pem:/etc/hono/auth-server-cert.pem
  #      - ${project.build.directory}/compose/hono/auth-server-key.pem:/etc/hono/auth-server-key.pem
  #      - ${project.build.directory}/compose/hono/permissions.json:/etc/hono/permissions.json
  #    healthcheck:
  #      test: curl -sf http://localhost:8088/readiness

  #  hono-service-command-router:
  #    image: eclipse/hono-service-command-router-quarkus-native:${docker.hono.version}
  #    env_file: ${project.build.directory}/compose/hono/base.env
  #    environment:
  #      - HONO_COMMANDROUTER_AMQP_INSECUREPORTENABLED=true
  #      - HONO_COMMANDROUTER_AMQP_INSECUREPORTBINDADDRESS=0.0.0.0
  #      - HONO_COMMANDROUTER_AMQP_INSECUREPORT=5672
  #      - HONO_COMMAND_CERTPATH=/etc/hono/cert.pem
  #      - HONO_COMMAND_KEYPATH=/etc/hono/key.pem
  #      - HONO_COMMAND_TRUSTSTOREPATH=/etc/hono/trusted-certs.pem
  #    volumes:
  #      - ${project.build.directory}/compose/hono/auth-server-cert.pem:/etc/hono/auth-server-cert.pem
  #      - ${project.build.directory}/compose/hono/trusted-certs.pem:/trusted-certs.pem
  #      - ${project.build.directory}/compose/hono/command-router-cert.pem:/etc/hono/command-router-cert.pem
  #      - ${project.build.directory}/compose/hono/command-router-key.pem:/etc/hono/command-router-key.pem
  #      - ${project.build.directory}/compose/hono/command-router.credentials:/etc/hono/credentials
  #    healthcheck:
  #      test: curl -sf http://localhost:8088/readiness
  #    depends_on:
  #      kafka:
  #        condition: service_started
  #      hono-service-auth:
  #        condition: service_started
  #      fleet-registry-hono-bridge:
  #        condition: service_started

  #  hono-adapter-mqtt:
  #    hostname: hono-adapter-mqtt
  #    image: eclipse/hono-adapter-mqtt-vertx-quarkus-native:${docker.hono.version}
  #    env_file: ${project.build.directory}/compose/hono/base.env
  #    environment:
  #      - HONO_MQTT_INSECUREPORTENABLED=true
  #      - HONO_MQTT_INSECUREPORTBINDADDRESS=0.0.0.0
  #      - HONO_MQTT_INSECUREPORT=1883
  #    volumes:
  #      - ${project.build.directory}/compose/hono/adapter-mqtt.credentials:/etc/hono/credentials
  #      - ${project.build.directory}/compose/hono/auth-server-cert.pem:/etc/hono/auth-server-cert.pem
  #    healthcheck:
  #      test: curl -sf http://localhost:8088/readiness
  #    depends_on:
  #      kafka:
  #        condition: service_started
  #      hono-service-auth:
  #        condition: service_started
  #      hono-service-command-router:
  #        condition: service_started
  #      fleet-registry-hono-bridge:
  #        condition: service_started


  ###
  ### INOA :: CNPM
  ###

  cnpm-tenant-service:
    image: ${jib.to.image.registry}/inoa/cnpm-tenant-service:${jib.to.image.version}
    environment:
      - MICRONAUT_ENVIRONMENTS=postgres
      - MICRONAUT_SECURITY_ENABLED=FALSE
      - MICRONAUT_SECURITY_TOKEN_JWT_SIGNATURES_JWKS_KEYCLOAK_URL=http://keycloak:8080/realms/inoa/protocol/openid-connect/certs
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INOA_CNPM_TENANT_DEFAULT_ISSUER_NAME=compose
      - INOA_CNPM_TENANT_DEFAULT_ISSUER_URL=http://keycloak:8080/realms/inoa
      - INOA_CNPM_TENANT_DEFAULT_ISSUER_CACHE_DURATION=P7d
      - INOA_CNPM_TENANT_DEFAULT_ISSUER_SERVICES=inoa-backend,foo
      - LOGGER_LEVELS_IO_INOA=TRACE
      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
    healthcheck:
      test: curl -sf http://localhost:8080/endpoints/health
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      kafka:
        condition: service_started

  cnpm-auth-service:
    image: ${jib.to.image.registry}/inoa/cnpm-auth-service:${jib.to.image.version}
    environment:
      - MICRONAUT_HTTP_SERVICES_TENANT_MANAGEMENT_URL=http://cnpm-tenant-service:8080
      - MICRONAUT_SECURITY_OAUTH2_CLIENTS_KEYCLOAK_CLIENT_ID=inoa-cnpm-auth-service
      - MICRONAUT_SECURITY_OAUTH2_CLIENTS_KEYCLOAK_CLIENT_SECRET=changeMe
      - MICRONAUT_SECURITY_OAUTH2_CLIENTS_KEYCLOAK_GRANT_TYPE=CLIENT_CREDENTIALS
      - MICRONAUT_SECURITY_OAUTH2_CLIENTS_KEYCLOAK_CLIENT_CREDENTIALS_SERVICE_ID_REGEX=tenant-management
      - MICRONAUT_SECURITY_OAUTH2_CLIENTS_KEYCLOAK_OPENID_ISSUER=http://keycloak:8080/realms/inoa
      - GRPC_SERVER_PORT=8081
      - INOA_CNPM_AUTH_TOKEN_EXCHANGE_KEY_ID=test
      - INOA_CNPM_AUTH_TOKEN_EXCHANGE_ISSUER=http://cnpm-auth-service:8080
      - LOGGER_LEVELS_IO_INOA=TRACE
      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
    healthcheck:
      test: curl -sf http://localhost:8080/endpoints/health
    depends_on:
      keycloak:
        condition: service_started
      envoy:
        condition: service_started
      cnpm-tenant-service:
        condition: service_started

  cnpm-echo-service:
    image: kennethreitz/httpbin
    depends_on:
      envoy:
        condition: service_started
      cnpm-auth-service:
        condition: service_started


  ###
  ### INOA :: Fleet
  ###

  #  fleet-registry-service:
  #    image: ${jib.to.image.registry}/inoa/fleet-registry-service:${jib.to.image.version}
  #    environment:
  #      - MICRONAUT_ENVIRONMENTS=postgres
  #      - MICRONAUT_SECURITY_TOKEN_JWT_SIGNATURES_JWKS_KEYCLOAK_URL=http://cnpm-auth-service:8080/certs
  #      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #      - KAFKA_CONSUMERS_DEFAULT_METADATA_MAX_AGE_MS=1000
  #      - INOA_FLEET_REGISTRY_AUTH_GENERATE_KEY=true
  #      - INOA_FLEET_REGISTRY_AUTH_ISSUER=test
  #      - INOA_FLEET_REGISTRY_SECURITY_TENANT_AUDIENCE_WHITELIST=gateway-registry-client
  #      - INOA_FLEET_REGISTRY_TENANT_CONFIGURATIONS[0]_KEY=mqtt.uri
  #      - INOA_FLEET_REGISTRY_TENANT_CONFIGURATIONS[0]_DESCRIPTION=mqtt.uri
  #      - INOA_FLEET_REGISTRY_TENANT_CONFIGURATIONS[0]_TYPE=STRING
  #      - INOA_FLEET_REGISTRY_TENANT_CONFIGURATIONS[0]_PATTERN='(tcp|mqtt|ssl|mqtts)://[a-z0-9\.\-]+:[0-9]{3,5}'
  #      - LOGGER_LEVELS_IO_INOA=TRACE
  #      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
  #    healthcheck:
  #      test: curl -sf http://localhost:8080/endpoints/health
  #    depends_on:
  #      postgres:
  #        condition: service_healthy
  #      kafka:
  #        condition: service_started
  #      cnpm-auth-service:
  #        condition: service_started

  #  fleet-registry-hono-bridge:
  #    image: ${jib.to.image.registry}/inoa/fleet-registry-hono-bridge:${jib.to.image.version}
  #    env_file: ${project.build.directory}/compose/hono/base.env
  #    environment:
  #      - HONO_REGISTRY_AMQP_INSECUREPORTENABLED=true
  #      - HONO_REGISTRY_AMQP_INSECUREPORTBINDADDRESS=0.0.0.0
  #      - HONO_REGISTRY_AMQP_INSECUREPORT=5672
  #      - HONO_REGISTRY_HTTP_INSECUREPORTENABLED=true
  #      - HONO_REGISTRY_HTTP_INSECUREPORTBINDADDRESS=0.0.0.0
  #      - HONO_REGISTRY_HTTP_INSECUREPORT=9999
  #      - HONO_INOA_GATEWAYREGISTRYHOST=gateway-registry
  #      - HONO_INOA_GATEWAYREGISTRYPORT=8080
  #      - HONO_INOA_KEYCLOAK_URL=http://keycloak:8080/realms/inoa/protocol/openid-connect/token
  #      - HONO_INOA_CLIENT_ID=gateway-registry-client
  #      - HONO_INOA_CLIENT_SECRET=changeMe
  #    volumes:
  #      - ${project.build.directory}/compose/hono/auth-server-cert.pem:/etc/hono/auth-server-cert.pem
  #    healthcheck:
  #      test: curl -sf http://localhost:8088/readiness
  #    depends_on:
  #      hono-service-auth:
  #        condition: service_started
  #      fleet-registry-service:
  #        condition: service_started#

  #  fleet-gateway-logger:
  #    image: ${jib.to.image.registry}/inoa/fleet-gateway-logger:${jib.to.image.version}
  #    environment:
  #      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #      - KAFKA_CONSUMERS_DEFAULT_METADATA_MAX_AGE_MS=1000
  #      - LOGGER_LEVELS_IO_INOA=TRACE
  #      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
  #    healthcheck:
  #      test: curl -sf http://localhost:8080/endpoints/health
  #    depends_on:
  #      kafka:
  #        condition: service_started

  ###
  ### INOA :: Measurement
  ###

  influxdb:
    hostname: influxdb
    image: influxdb:${docker.influxdb.version}
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=master
      - DOCKER_INFLUXDB_INIT_BUCKET=default
      - DOCKER_INFLUXDB_INIT_RETENTION=0s
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=changeMe
    healthcheck:
      test: wget --spider --quiet http://localhost:8086/ping || exit 1

  grafana:
    hostname: grafana
    image: grafana/grafana:${docker.grafana.version}
    environment:
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=grafana
      - GF_SERVER_ENFORCE_DOMAIN=false
      - GF_SERVER_ROOT_URL=http://grafana:3000
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_OAUTH_AUTO_LOGIN=true
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=false
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://keycloak:8080/realms/inoa/protocol/openid-connect/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://keycloak:8080/realms/inoa/protocol/openid-connect/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=http://keycloak:8080/realms/inoa/protocol/openid-connect/userinfo
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=changeMe
      - GF_AUTH_GENERIC_OAUTH_SCOPES=email
      - GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE=FALSE
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
    depends_on:
      keycloak:
        condition: service_healthy
      influxdb:
        condition: service_started

  measurement-provisioner:
    image: ${jib.to.image.registry}/inoa/measurement-provisioner:${jib.to.image.version}
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMERS_DEFAULT_METADATA_MAX_AGE_MS=1000
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_USERNAME=admin
      - GRAFANA_PASSWORD=password
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_ORG=master
      - INFLUXDB_TOKEN=changeMe
      - LOGGER_LEVELS_IO_INOA=TRACE
      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
    healthcheck:
      test: curl -sf http://localhost:8080/endpoints/health
    depends_on:
      influxdb:
        condition: service_started
      grafana:
        condition: service_started

  measurement-telemetry-translator:
    image: ${jib.to.image.registry}/inoa/measurement-telemetry-translator:${jib.to.image.version}
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMERS_DEFAULT_METADATA_MAX_AGE_MS=1000
      - LOGGER_LEVELS_IO_INOA=TRACE
      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
    healthcheck:
      test: curl -sf http://localhost:8080/endpoints/health
    depends_on:
      kafka:
        condition: service_started

  measurement-telemetry-exporter:
    image: ${jib.to.image.registry}/inoa/measurement-telemetry-exporter:${jib.to.image.version}
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMERS_DEFAULT_METADATA_MAX_AGE_MS=1000
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME=influxdb
      - INFLUXDB_PASSWORD=changeMe
      - INFLUXDB_ORG=test
      - INFLUXDB_BUCKET=export
      - LOGGER_LEVELS_IO_INOA=TRACE
      - LOGGER_LEVELS_ORG_APACHE_KAFKA=ERROR
    healthcheck:
      test: curl -sf http://localhost:8080/endpoints/health
    depends_on:
      influxdb:
        condition: service_started
      kafka:
        condition: service_started


  ###
  ### Test stuff
  ###

  dns-proxy:
    image: defreitas/dns-proxy-server:2.19.0
    environment:
      - MG_LOG_LEVEL=WARNING
    ports: ["5380:5380"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/resolv.conf:/etc/resolv.conf

  swagger-ui:
    hostname: swagger-ui
    image: swaggerapi/swagger-ui:v3.52.5
    environment:
      - URLS=[{url:"/tenant-management.yaml",name:"Tenant Management API"}
      - DISPLAY_OPERATION_ID=true
      - DISPLAY_REQUEST_DURATION=true
      - PERSIST_AUTHORIZATION=true
      - VALIDATOR_URL=
      - TRY_IT_OUT_ENABLED=true
      - OAUTH_CLIENT_ID=gateway-registry-ui
      - OAUTH_CLIENT_SECRET=changeMe
    volumes:
      - ${project.parent.basedir}/cnpm/tenant-api-management/src/main/resources/openapi/spec.yaml:/usr/share/nginx/html/tenant-management.yaml
    depends_on:
      cnpm-tenant-service:
        condition: service_started

  kafka-ui:
    hostname: kafka-ui
    image: obsidiandynamics/kafdrop:3.27.0
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
