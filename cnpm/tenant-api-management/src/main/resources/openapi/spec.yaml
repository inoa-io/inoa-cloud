openapi: 3.0.3
info:
  title: INOA Tenant Management API
  description: REST API for managing tenants and their users.
  version: ${project.version}
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: inoa.io
    url: https://github.com/inoa-io
servers:
  - url: /api/tenant/v1
security:
  - BearerAuth: []
paths:

  /tenants:
    get:
      summary: Find tenants.
      description: Returns all tenants ordered by name.
      operationId: findTenants
      tags: [tenants]
      responses:
        200:
          description: Returns tenants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantPageEntry'
        401:
          description: Unauthorized.
  /tenants/{tenant_id}:
    parameters:
      - $ref: '#/components/parameters/TenantId'
    get:
      summary: Find tenant.
      description: Find tenant.
      operationId: findTenant
      tags: [tenants]
      responses:
        200:
          description: Tenant found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        401:
          description: Unauthorized.
        404:
          description: Tenant not found or not assigned to user.
    post:
      summary: Create tenant.
      description: Create tenant for user with email from JWT. If user does not exists the user is also created. The created tenant is assigned to user with email from jwt. A default issuer is assigned to this tenant.
      operationId: createTenant
      tags: [tenants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreate'
      responses:
        201:
          description: Tenant created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        409:
          description: Tenant with id already exists.
    patch:
      summary: Update tenant.
      description: Update existing tenant.
      operationId: updateTenant
      tags: [tenants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdate'
      responses:
        200:
          description: Tenant updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Tenant not found or not assigned to user.
    delete:
      summary: Delete tenant.
      description: Delete tenant.
      operationId: deleteTenant
      tags: [tenants]
      responses:
        204:
          description: Tenant deleted.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Tenant not found or not assigned to user.
  /tenants/{tenant_id}/issuers:
    parameters:
      - $ref: '#/components/parameters/TenantId'
    get:
      summary: Find issuers.
      description: Returns all issuers ordered by name.
      operationId: findIssuers
      tags: [issuers]
      responses:
        200:
          description: Returns tenants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issuer'
        401:
          description: Unauthorized.
        404:
          description: Tenant not found or not assigned to user.
  /tenants/{tenant_id}/issuers/{name}:
    parameters:
      - $ref: '#/components/parameters/TenantId'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssuerName'
    get:
      summary: Find issuer.
      description: Find issuer.
      operationId: findIssuer
      tags: [issuers]
      responses:
        200:
          description: Issuer found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        401:
          description: Unauthorized.
        404:
          description: Issuer not found or not tenant assigned to user.
    post:
      summary: Create issuer.
      description: Create isser.
      operationId: createIssuer
      tags: [issuers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerCreate'
      responses:
        201:
          description: Tenant created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Issuer not found or not tenant assigned to user.
        409:
          description: Issuer with id/url already exists.
    patch:
      summary: Update issuer.
      description: Update existing issuer.
      operationId: updateIssuer
      tags: [issuers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerUpdate'
      responses:
        200:
          description: Issuer updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        409:
          description: Issuer with id/url already exists.
        404:
          description: Issuer not found or not tenant assigned to user.
    delete:
      summary: Delete issuer.
      description: Delete issuer.
      operationId: deleteIssuer
      tags: [issuers]
      responses:
        204:
          description: Issuer deleted.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Issuer not found or tenant not assigned to user.

  /tenants/{tenant_id}/users:
    parameters:
      - $ref: '#/components/parameters/TenantId'
    get:
      parameters:
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
        - $ref: '#/components/parameters/Sort'
        - name: filter
          description: Search in name. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 10
            example: example
      summary: Find users.
      description: Returns all users (default ordered by email).
      operationId: findUsers
      tags: [users]
      responses:
        200:
          description: Page with users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        401:
          description: Unauthorized.
        404:
          description: Tenant not found or not assigned to user.
    post:
      summary: Create user.
      description: Create user for given tenant. If user with email exists, the existing user is assigned to the given tenant.
      operationId: createUser
      tags: [users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        201:
          description: User created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Tenant not found.
        409:
          description: User with email already exists.

  /tenants/{tenant_id}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/TenantId'
      - name: user_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
    get:
      summary: Find user.
      description: TODO
      operationId: findUser
      tags: [users]
      responses:
        200:
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized.
        404:
          description: Tenant or user not found.
    patch:
      summary: Update user.
      description: Update user in context of current tenant.
      operationId: updateUser
      tags: [users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: User updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Malformed.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Tenant or user not found.
    delete:
      summary: Delete user.
      description: TODO
      operationId: deleteUser
      tags: [users]
      responses:
        204:
          description: User deleted.
        401:
          description: Unauthorized.
        403:
          description: Forbidden.
        404:
          description: Tenant or user not found.

components:
  schemas:

    Timestamp:
      description: Common timestamp for created/updated timestamps.
      type: string
      format: date-time
      example: 2021-01-01T00:00:00
    Enabled:
      description: Flag if enabled or not.
      type: boolean
      default: true
      example: false

    ###
    ### Tenant
    ###

    TenantId:
      description: Id of tenant (cannot change).
      type: string
      minLength: 4
      maxLength: 30
      pattern: ^[a-z0-9\-]*$
      example: inoa
    TenantName:
      description: Human friendly display name (can change).
      type: string
      minLength: 3
      maxLength: 100
      example: inoa.io Project
    TenantPageEntry:
      description: Tenant with fields.
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/TenantId'
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - tenant_id
        - name
        - enabled
        - created
        - updated
    Tenant:
      description: Tenant with fields.
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/TenantId'
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        issuers:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Issuer'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - tenant_id
        - name
        - enabled
        - issuers
        - created
        - updated
    TenantCreate:
      description: Tenant to create.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          $ref: '#/components/schemas/Enabled'
      required:
        - name
        - enabled
    TenantUpdate:
      description: Tenant to update.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          description: Flag if enabled or not.
          type: boolean
          example: false

    ###
    ### Issuer
    ###

    IssuerName:
      description: Name for issuer.
      type: string
      maxLength: 10
      pattern: ^[a-z0-9\-]*$
      example: keycloak
    IssuerUrl:
      description: Base URL for OpenID provider.
      type: string
      format: url
      example: https://keycloak.inoa.io/realms/inoa
    IssuerCacheDuration:
      description: Duration how long JWKSet should be cached.
      type: string
      format: duration
      example: PT10s
    IssuerServices:
      description: Whitelist for audiences to pass authentication without user context. Warning! this clients are admins for this application. E.g. Hono GatewayRegistry bridge.
      type: array
      uniqueItems: true
      items:
        type: string
        maxLength: 20
        pattern: ^[a-z0-9\-]*$
    Issuer:
      description: Whitelisted OpenID issuer for tenant.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/IssuerName'
        url:
          $ref: '#/components/schemas/IssuerUrl'
        cache_duration:
          $ref: '#/components/schemas/IssuerCacheDuration'
        services:
          $ref: '#/components/schemas/IssuerServices'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - name
        - url
        - cache_duration
        - created
        - updated
    IssuerCreate:
      description: Whitelisted OpenID issuer for tenant.
      type: object
      properties:
        url:
          $ref: '#/components/schemas/IssuerUrl'
        cache_duration:
          $ref: '#/components/schemas/IssuerCacheDuration'
        services:
          $ref: '#/components/schemas/IssuerServices'
      required:
        - url
    IssuerUpdate:
      description: Whitelisted OpenID issuer for tenant.
      type: object
      properties:
        url:
          $ref: '#/components/schemas/IssuerUrl'
        cache_duration:
          $ref: '#/components/schemas/IssuerCacheDuration'
        services:
          $ref: '#/components/schemas/IssuerServices'

    ###
    ### User
    ###

    UserId:
      description: Id as technical reference (never changes).
      type: string
      format: uuid
      example: e867459e-f1b2-47b7-91f5-c0e6c9675ce6
    UserEmail:
      description: User email.
      type: string
      format: email
      example: user@example.org
    UserRole:
      description: User role in context of INOA.
      type: string
      enum:
        - viewer
        - admin
        - editor
      example: viewer
    User:
      description: User with fields.
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'
        email:
          $ref: '#/components/schemas/UserEmail'
        role:
          $ref: '#/components/schemas/UserRole'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - user_id
        - email
        - role
        - created
        - updated
    UserPage:
      description: Page for user.
      type: object
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: '#/components/schemas/User'
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          example: 0
      required:
        - content
        - total_size
    UserCreate:
      description: User to create.
      type: object
      properties:
        email:
          $ref: '#/components/schemas/UserEmail'
        role:
          $ref: '#/components/schemas/UserRole'
      required:
        - email
        - role
    UserUpdate:
      description: User to update.
      type: object
      properties:
        role:
          $ref: '#/components/schemas/UserRole'

  parameters:
    PageablePage:
      description: Page number for pagination.
      name: page
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 0
    PageableSize:
      description: Page size for pagination. Value is checked on server side and can be ignored.
      name: size
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 50
    Sort:
      description: Sorting.
      name: sort
      in: query
      schema:
        type: array
        items:
          type: string
          pattern: ^[a-zA-Z_]{2,10}(,(asc|desc|ASC|DESC))?$
      example:
        - email,asc
        - created,desc
    TenantId:
      name: tenant_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TenantId'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
