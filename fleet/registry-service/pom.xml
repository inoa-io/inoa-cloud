<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.inoa.fleet</groupId>
		<artifactId>fleet-parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>fleet-registry-service</artifactId>

	<name>INOA :: Fleet :: Registry Service</name>

	<dependencies>

		<!-- project -->
		<dependency>
			<groupId>io.inoa.fleet</groupId>
			<artifactId>fleet-registry-api-management</artifactId>
			<version>${project.version}</version>
			<type>yaml</type>
			<classifier>spec</classifier>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.inoa.fleet</groupId>
			<artifactId>fleet-registry-api-gateway</artifactId>
			<version>${project.version}</version>
			<type>yaml</type>
			<classifier>spec</classifier>
			<scope>provided</scope>
		</dependency>

		<!-- micronaut -->
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-http-server-netty</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.kafka</groupId>
			<artifactId>micronaut-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micronaut.reactor</groupId>
			<artifactId>micronaut-reactor</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micronaut.security</groupId>
			<artifactId>micronaut-security-jwt</artifactId>
		</dependency>
		<dependency>
			<groupId>io.kokuwa.micronaut</groupId>
			<artifactId>micronaut-logging</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- persistence -->
		<dependency>
			<groupId>io.micronaut.data</groupId>
			<artifactId>micronaut-data-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micronaut.sql</groupId>
			<artifactId>micronaut-jdbc-hikari</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.flyway</groupId>
			<artifactId>micronaut-flyway</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- libraries -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
		</dependency>

		<!-- monitoring -->
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-management</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut.micrometer</groupId>
			<artifactId>micronaut-micrometer-registry-prometheus</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- test -->
		<dependency>
			<groupId>io.micronaut.test</groupId>
			<artifactId>micronaut-test-junit5</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.micronaut</groupId>
			<artifactId>micronaut-http-client</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<plugins>

			<!-- copy project dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>openapi-spec</id>
						<goals>
							<goal>copy</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>io.inoa.fleet</groupId>
									<artifactId>fleet-registry-api-gateway</artifactId>
									<classifier>spec</classifier>
									<type>yaml</type>
									<version>${project.version}</version>
									<destFileName>gateway.yaml</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>io.inoa.fleet</groupId>
									<artifactId>fleet-registry-api-management</artifactId>
									<classifier>spec</classifier>
									<type>yaml</type>
									<version>${project.version}</version>
									<destFileName>management.yaml</destFileName>
								</artifactItem>
							</artifactItems>
							<outputDirectory>${project.build.outputDirectory}/openapi</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- add generated sources -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>openapi-sources</id>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/annotations</source>
								<source>${project.build.directory}/generated-sources/openapi</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>openapi-test-sources</id>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-test-sources/openapi</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- generate sources from openapi spec -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>openapi-gateway-generate</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.build.outputDirectory}/openapi/gateway.yaml</inputSpec>
							<apiPackage>io.inoa.fleet.registry.rest.gateway</apiPackage>
							<modelPackage>io.inoa.fleet.registry.rest.gateway</modelPackage>
							<generateSupportingFiles>false</generateSupportingFiles>
						</configuration>
					</execution>
					<execution>
						<id>openapi-management-generate</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.build.outputDirectory}/openapi/management.yaml</inputSpec>
							<apiPackage>io.inoa.fleet.registry.rest.management</apiPackage>
							<modelPackage>io.inoa.fleet.registry.rest.management</modelPackage>
							<configOptions>
								<pageable>true</pageable>
							</configOptions>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<packageName>io.inoa.fleet.registry.rest</packageName>
				</configuration>
			</plugin>

			<!-- configure annotation processors -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${version.org.projectlombok}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${version.org.mapstruct}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-inject-java</artifactId>
							<version>${version.io.micronaut}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-validation</artifactId>
							<version>${version.io.micronaut}</version>
						</path>
						<path>
							<groupId>io.micronaut</groupId>
							<artifactId>micronaut-http-validation</artifactId>
							<version>${version.io.micronaut}</version>
						</path>
						<path>
							<groupId>io.micronaut.data</groupId>
							<artifactId>micronaut-data-processor</artifactId>
							<version>${version.io.micronaut.data}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!-- run tests with multiple database configurations -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<executions>
					<execution>
						<id>default-test</id>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<reportNameSuffix>h2</reportNameSuffix>
							<skipExec>${maven.test.skip.exec}</skipExec>
						</configuration>
					</execution>
					<execution>
						<id>postgres-test</id>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<environmentVariables>
								<MICRONAUT_ENVIRONMENTS>postgres</MICRONAUT_ENVIRONMENTS>
							</environmentVariables>
							<reportNameSuffix>postgres</reportNameSuffix>
							<skipExec>${maven.test.skip.exec}</skipExec>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- create container -->
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>dockerBuild</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>
