openapi: 3.0.3
info:
  title: INOA Registry Gateway API
  description: TODO
  version: ${project.version}
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: inoa.io
    url: https://github.com/inoa-io
servers: []
security:
  - BearerAuth: []
paths:
  /gateway:
    post:
      tags: [gateway]
      summary: Register gateway
      description: Self register as gateway.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        204:
          description: Gateway registered
        400:
          description: Malformed
        409:
          description: Gateway already registered
  /gateway/configuration:
    get:
      tags: [gateway]
      summary: Get gateway configuration
      description: Get gateway configuration.
      operationId: getConfiguration
      responses:
        200:
          description: Configuration for gateway
          content:
            application/json:
              schema:
                type: string
                additionalProperties: {}
        401:
          description: Unauthorized
  /gateway/properties:
    get:
      tags: [properties]
      summary: Get gateway properties
      description: TODO
      operationId: getProperties
      responses:
        200:
          description: Properties for gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        401:
          description: Unauthorized
    put:
      tags: [properties]
      summary: Set multiple gateway properties.
      description: TODO
      operationId: setProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        200:
          description: Properties for gateway after manipulation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        401:
          description: Unauthorized
  /gateway/properties/{key}:
    parameters:
      - name: key
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PropertyKey'
    put:
      tags: [properties]
      summary: Set gateway property
      description: Set gateway property.
      operationId: setProperty
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/PropertyValue'
      responses:
        204:
          description: Property updated
        401:
          description: Unauthorized
    delete:
      tags: [properties]
      summary: Delete gateway property
      description: Delete gateway property.
      operationId: deleteProperty
      responses:
        204:
          description: Property deleted
        401:
          description: Unauthorized
        404:
          description: Key not found
components:
  schemas:
    PropertyKey:
      type: string
      pattern: '^[a-z0-9_\-\.]{2,100}$'
      example: test-key
    PropertyValue:
      type: string
      maxLength: 1000
      example: test-value
    Properties:
      type: string
      additionalProperties:
        type: string
      example:
        test-a: this-is-a
        test-b: this-is-b
    GatewayId:
      description: Id as technical reference (never changes).
      type: string
      minLength: 4
      maxLength: 20
      pattern: ^[A-Z][A-Z0-9\-_]{3,19}$
      example: GW-00001
    CredentialType:
      description: Types of supported credentials.
      type: string
      enum:
        - psk
        - rsa
    CredentialValue:
      description: Value for credential.
      type: string
      format: binary
    Register:
      description: Contains all informations needed to create a new gateway.
      properties:
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        credential_type:
          $ref: '#/components/schemas/CredentialType'
        credential_value:
          $ref: '#/components/schemas/CredentialValue'
      required:
        - gateway_id
        - credential_type
        - credential_value
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
