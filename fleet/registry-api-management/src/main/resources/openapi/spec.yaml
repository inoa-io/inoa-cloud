openapi: 3.0.3
info:
  title: INOA Registry Management API
  description: |
     * manage tenants/gateways/groups/credentials
     * credentials are stored in database/consul/...
  version: ${project.version}
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: inoa.io
    url: https://github.com/inoa-io
servers: []
security:
  - BearerAuth: []
paths:
  /groups:
    get:
      tags: [groups]
      summary: Find groups
      description: Returns all groups ordered by name.
      operationId: findGroups
      responses:
        200:
          description: Sorted list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
    post:
      tags: [groups]
      summary: Create group
      description: Create group.
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        201:
          description: Created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Malformed
        401:
          description: Unauthorized
        409:
          description: Group with name already exists
  /groups/{group_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      tags: [groups]
      summary: Find group
      description: Find group by id.
      operationId: findGroup
      responses:
        200:
          description: Group found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
        404:
          description: Group not found
    patch:
      tags: [groups]
      summary: Update group
      description: Update group name.
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Malformed
        401:
          description: Unauthorized
        404:
          description: Group not found
        409:
          description: Group with name already exists
    delete:
      tags: [groups]
      summary: Delete group
      description: Delete group by id.
      operationId: deleteGroup
      responses:
        204:
          description: Group deleted
        401:
          description: Unauthorized
        404:
          description: Group not found
  /gateways:
    get:
      tags: [gateways]
      summary: Find gateways
      description: Returns all gateways ordered by name.
      operationId: findGateways
      parameters:
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
        - $ref: '#/components/parameters/Sort'
        - name: filter
          description: Search in name. Supports wildcard *, is case insensitive.
          in: query
          schema:
            type: string
            maxLength: 100
            example: isrl
      responses:
        200:
          description: Paged gateway list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayPage'
        400:
          description: Illegal sort, allowed only name,enabled,created,updated
        401:
          description: Unauthorized
    post:
      tags: [gateways]
      summary: Create gateway
      description: Create gateway.
      operationId: createGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayCreate'
      responses:
        201:
          description: Gateway created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayDetail'
        400:
          description: Malformed
        401:
          description: Unauthorized
        409:
          description: Gateway with name already exists.
  /gateways/{gateway_id}:
    parameters:
      - $ref: '#/components/parameters/GatewayId'
    get:
      tags: [gateways]
      summary: Find gateway
      description: Find gateway by id.
      operationId: findGateway
      responses:
        200:
          description: Returns gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayDetail'
        401:
          description: Unauthorized
        404:
          description: Gateway not found
    patch:
      tags: [gateways]
      summary: Update gateway
      description: Update gateway by id.
      operationId: updateGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayUpdate'
      responses:
        200:
          description: Gateway updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayDetail'
        400:
          description: Malformed or group not found
        401:
          description: Unauthorized
        404:
          description: Gateway not found
        409:
          description: Gateway with name already exists
    delete:
      tags: [gateways]
      summary: Delete gateway
      description: Delete gateway by id.
      operationId: deleteGateway
      responses:
        204:
          description: Gateway deleted.
        401:
          description: Unauthorized
        404:
          description: Gateway not found.
  /gateways/{gateway_id}/credentials:
    parameters:
      - $ref: '#/components/parameters/GatewayId'
    get:
      tags: [credentials]
      summary: Get credentials
      description: Get credentials for gateway.
      operationId: findCredentials
      responses:
        200:
          description: Returns credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
        401:
          description: Unauthorized
        404:
          description: Gateway not found
    post:
      tags: [credentials]
      summary: Create credential
      description: Create credential.
      operationId: createCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialCreate'
      responses:
        201:
          description: Credential created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        400:
          description: Malformed
        401:
          description: Unauthorized
        404:
          description: Gateway not found
        409:
          description: Name for credential already exists
  /gateways/{gateway_id}/credentials/{credential_id}:
    parameters:
      - $ref: '#/components/parameters/GatewayId'
      - $ref: '#/components/parameters/CredentialId'
    get:
      tags: [credentials]
      summary: Find credential
      description: Find credential.
      operationId: findCredential
      responses:
        200:
          description: Credential found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        401:
          description: Unauthorized
        404:
          description: Gateway or credential not found
    patch:
      tags: [credentials]
      summary: Update credential
      description: Update credential.
      operationId: updateCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialUpdate'
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        400:
          description: Malformed
        401:
          description: Unauthorized
        404:
          description: Gateway or credential not found
        409:
          description: Name for credential already exists
    delete:
      tags: [credentials]
      summary: Delete credential
      description: Delete credential.
      operationId: deleteCredential
      responses:
        204:
          description: Credential deleted
        401:
          description: Unauthorized
        404:
          description: Gateway or credential not found
  /configuration/definition:
    get:
      tags: [configuration]
      summary: Find configuration definitions
      description: Find configurations definitions.
      operationId: findConfigurationDefinitions
      responses:
        200:
          description: Configuration definitions found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationDefinition'
        401:
          description: Unauthorized
  /configuration/definition/{configuration_key}:
    parameters:
      - $ref: '#/components/parameters/ConfigurationKey'
    post:
      tags: [configuration]
      summary: Save configuration definition
      description: Save configuration definition.
      operationId: createConfigurationDefinition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationDefinition'
      responses:
        201:
          description: Configuration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDefinition'
        401:
          description: Unauthorized
        400:
          description: Malformed
        409:
          description: Key already in use
    delete:
      tags:
        - configuration
      summary: Delete configuration definition
      description: Delete configuration definition.
      operationId: deleteConfigurationDefinition
      responses:
        204:
          description: Configuration definition deleted
        401:
          description: Unauthorized
        404:
          description: Configuration definition not found
  /configuration:
    get:
      tags: [configuration]
      summary: Find configurations
      description: Find configurations on tenant level ordered by key.
      operationId: findConfigurations
      responses:
        200:
          description: Configurations found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        401:
          description: Unauthorized
  /configuration/{configuration_key}:
    parameters:
      - $ref: '#/components/parameters/ConfigurationKey'
    put:
      tags: [configuration]
      summary: Save configuration
      description: Save configuration.
      operationId: setConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationSet'
      responses:
        204:
          description: Configuration set
        401:
          description: Unauthorized
        400:
          description: Malformed
        404:
          description: Configuration not found
    delete:
      tags: [configuration]
      summary: Delete configuration
      description: Delete configuration.
      operationId: resetConfiguration
      responses:
        204:
          description: Configuration deleted
        401:
          description: Unauthorized
        404:
          description: Configuration not found.
  /groups/{group_id}/configuration:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      tags: [configuration]
      summary: Find configuration.
      description: Find configurations on group level ordered by key.
      operationId: findConfigurationsByGroup
      responses:
        200:
          description: Configuration found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        401:
          description: Unauthorized
        404:
          description: Group not found
  /groups/{group_id}/configuration/{configuration_key}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
      - $ref: '#/components/parameters/ConfigurationKey'
    put:
      tags: [configuration]
      summary: Save configuration value
      description: Save configuration value.
      operationId: setConfigurationByGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationSet'
      responses:
        204:
          description: Configuration set
        400:
          description: Malformed
        401:
          description: Unauthorized
        404:
          description: Group of configuration key not found
    delete:
      tags: [configuration]
      summary: Delete configuration
      description: Delete configuration.
      operationId: resetConfigurationByGroup
      responses:
        204:
          description: Configuration deleted
        401:
          description: Unauthorized
        404:
          description: Group of configuration key not found
  /gateway/{gateway_id}/configuration:
    parameters:
      - $ref: '#/components/parameters/GatewayId'
    get:
      tags: [configuration]
      summary: Find configuration
      description: Find configurations on gateway level ordered by key.
      operationId: findConfigurationsByGateway
      responses:
        200:
          description: Configuration found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        401:
          description: Unauthorized
        404:
          description: Group not found
  /gateway/{gateway_id}/configuration/{configuration_key}:
    parameters:
      - $ref: '#/components/parameters/GatewayId'
      - $ref: '#/components/parameters/ConfigurationKey'
    put:
      tags: [configuration]
      summary: Save configuration value
      description: Save configuration value.
      operationId: setConfigurationByGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationSet'
      responses:
        204:
          description: Configuration set
        400:
          description: Malformed
        401:
          description: Unauthorized
        404:
          description: Gateway of configuration key not found
    delete:
      tags: [configuration]
      summary: Delete configuration
      description: Delete configuration.
      operationId: resetConfigurationByGateway
      responses:
        204:
          description: Configuration deleted
        401:
          description: Unauthorized
        404:
          description: Gateway of configuration key not found

components:
  schemas:

    Timestamp:
      description: Common timestamp for created/updated timestamps.
      type: string
      format: date-time
      example: 2021-01-01T00:00:00
    Id:
      description: Id as technical reference (never changes).
      type: string
      format: uuid
      example: 00000000-0000-0000-0000-000000000000
    Enabled:
      description: Flag if enabled or not.
      type: boolean
      default: true
      example: false

    ###
    ### Group
    ###

    GroupName:
      description: Name of a group.
      type: string
      minLength: 3
      maxLength: 20
      pattern: ^[a-zA-Z0-9\-]*$
      example: production
    Group:
      description: Group with fields.
      properties:
        group_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GroupName'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - group_id
        - name
        - created
        - updated
    GroupCreate:
      description: Group to create.
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GroupName'
      required:
        - name
    GroupUpdate:
      description: Group to update.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GroupName'


    ###
    ### Gateway
    ###

    GatewayId:
      description: Id as technical reference (never changes).
      type: string
      minLength: 4
      maxLength: 20
      pattern: ^[A-Z][A-Z0-9\-_]{3,19}$
      example: GW-00001
    GatewayName:
      description: Human friendly shortname (can change).
      type: string
      minLength: 3
      maxLength: 32
      pattern: ^[a-zA-Z0-9\-]{3,32}$
      example: Some gateway name
    GatewayGroups:
      description: Ids of groups where gateway is member.
      type: array
      items:
        $ref: '#/components/schemas/Id'
      uniqueItems: true
      example:
        - 00000000-0000-0000-0000-000000000000
    Gateway:
      description: Gateway with common fields.
      properties:
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - gateway_id
        - enabled
        - name
        - created
        - updated
    GatewayPage:
      description: Page for gateway list.
      properties:
        content:
          description: List of entries on page.
          type: array
          items:
            $ref: '#/components/schemas/Gateway'
        total_size:
          description: Total available entries.
          type: integer
          format: int32
          example: 0
      required:
        - content
        - total_size
    GatewayDetail:
      description: Gateway with detailed fields.
      properties:
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        group_ids:
          $ref: '#/components/schemas/GatewayGroups'
        properties:
          description: Properties set by gateway.
          type: string
          maxLength: 100
          additionalProperties:
            type: string
            maxLength: 1000
          example:
            test-a: this-is-a
            test-b: this-is-b
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - gateway_id
        - enabled
        - name
        - group_ids
        - properties
        - created
        - updated
    GatewayCreate:
      description: Gateway to create.
      type: object
      properties:
        gateway_id:
          $ref: '#/components/schemas/GatewayId'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        group_ids:
          $ref: '#/components/schemas/GatewayGroups'
      required:
        - gateway_id
        - name
    GatewayUpdate:
      description: Gateway to update.
      properties:
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        group_ids:
          $ref: '#/components/schemas/GatewayGroups'

    ###
    ### Credential
    ###

    CredentialName:
      description: Name to identify credential.
      type: string
      minLength: 3
      maxLength: 32
      pattern: '^[a-zA-Z0-9\-]*$'
      example: registry
    CredentialType:
      description: Types of supported credentials.
      type: string
      enum:
        - psk
        - rsa
    CredentialValue:
      description: Value for credential.
      type: string
      format: binary
    Credential:
      properties:
        credential_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/CredentialName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        type:
          $ref: '#/components/schemas/CredentialType'
        value:
          $ref: '#/components/schemas/CredentialValue'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
        - credential_id
        - name
        - enabled
        - type
        - created
        - updated
    CredentialCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CredentialName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        type:
          $ref: '#/components/schemas/CredentialType'
        value:
          $ref: '#/components/schemas/CredentialValue'
      required:
        - name
        - type
        - value
    CredentialUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CredentialName'
        enabled:
          $ref: '#/components/schemas/Enabled'

    ###
    ### Configuration
    ###

    ConfigurationKey:
      description: Key for configuration.
      type: string
      minLength: 3
      maxLength: 48
      pattern: '^[a-zA-Z0-9\-\.\_]*$'
      example: kokuwa
    ConfigurationType:
      description: Possible types of configuration values.
      enum:
        - INTEGER
        - BOOLEAN
        - STRING
        - URL
    ConfigurationDescription:
      description: Describes a configuration.
      type: string
      maxLength: 200
    ConfigurationDefinition:
      description: Defines a configuration.
      type: object
      properties:
        key:
          $ref: '#/components/schemas/ConfigurationKey'
        type:
          $ref: '#/components/schemas/ConfigurationType'
        description:
          $ref: '#/components/schemas/ConfigurationDescription'
      discriminator:
        propertyName: type
        mapping:
          INTEGER: '#/components/schemas/ConfigurationDefinitionInteger'
          BOOLEAN: '#/components/schemas/ConfigurationDefinitionBoolean'
          STRING: '#/components/schemas/ConfigurationDefinitionString'
          URL: '#/components/schemas/ConfigurationDefinitionUrl'
      required:
        - key
        - type
    ConfigurationDefinitionBoolean:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConfigurationDefinition'
    ConfigurationDefinitionUrl:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConfigurationDefinition'
    ConfigurationDefinitionInteger:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConfigurationDefinition'
        - properties:
            minimum:
              type: integer
              format: int32
            maximum:
              type: integer
              format: int32
    ConfigurationDefinitionString:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConfigurationDefinition'
        - properties:
            minLength:
              type: integer
              format: int32
              minimum: 1
            maxLength:
              type: integer
              format: int32
              maximum: 1000
            pattern:
              type: string
              maxLength: 1000
    ConfigurationValue:
      type: object
    ConfigurationSet:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/ConfigurationValue'
      required:
        - value
    Configuration:
      description: Defines a configuration.
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/ConfigurationDefinition'
        value:
          $ref: '#/components/schemas/ConfigurationValue'
      required:
        - definition
        - value

  parameters:
    PageablePage:
      description: Page number for pagination.
      name: page
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 0
    PageableSize:
      description: Page size for pagination.
      name: size
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
      example: 50
    Sort:
      description: Sorting.
      name: sort
      in: query
      schema:
        type: array
        items:
          type: string
          pattern: "[a-zA-Z_]{2,10}(,(asc|desc|ASC|DESC))?"
    GroupId:
      name: group_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    GatewayId:
      name: gateway_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/GatewayId'
    CredentialId:
      name: credential_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    SecretId:
      name: secret_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    ConfigurationKey:
      name: configuration_key
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ConfigurationKey'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
