openapi: 3.0.3
info:
  title: "Registry: Management API"
  description: |
     * manage tenants/gateways/groups/credentials
     * credentials are stored in database/consul/...
  version: 1.0.0
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact: 
    name: Kokuwa.io
    url: https://github.com/kokuwaio
servers:
- url: http://gateway-registry-service:8080
security: 
- Keycloak: []
- BearerAuth: []
paths:
  /tenants:
    get:
      tags:
      - tenants
      summary: 'Find tenants.'
      description: 'Returns all tenants ordered by name.'
      operationId: findTenants
      responses:
        200:
          description: 'Returns tenants.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        401:
          description: 'Unauthorized.'
    post:
      tags:
      - tenants
      summary: 'Create tenant.'
      description: TODO
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreate'
      responses:
        201:
          description: 'Tenant created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        409:
          description: Tenant with id or name already exists.
  /tenants/{tenant_id}:
    parameters:
    - $ref: '#/components/parameters/TenantId'
    get:
      tags:
      - tenants
      summary: 'Find tenant.'
      description: TODO
      operationId: findTenant
      responses:
        200:
          description: 'Tenant found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Tenant not found.'
    put:
      tags:
      - tenants
      summary: 'Update tenant.'
      description: TODO
      operationId: updateTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdate'
      responses:
        200:
          description: 'Tenant updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Tenant not found.'
        409:
          description: 'Tenant with name already exists.'
    delete:
      tags:
      - tenants
      summary: 'Delete tenant.'
      description: TODO
      operationId: deleteTenant
      responses:
        204:
          description: 'Tenant deleted.'
        400:
          description: 'Cannot delete because gateways exists.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Tenant not found.'
  /groups:
    get:
      tags:
      - groups
      summary: 'Find groups.'
      description: 'Returns all groups ordered by name.'
      operationId: findGroups
      responses:
        200:
          description: 'Returns groups.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        401:
          description: 'Unauthorized.'
    post:
      tags:
      - groups
      summary: 'Create group.'
      description: TODO
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        201:
          description: 'Group created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        409:
          description: 'Group with name already exists.'
  /groups/{group_id}:
    parameters:
    - $ref: '#/components/parameters/GroupId'
    get:
      tags:
      - groups
      summary: 'Fimd group.'
      description: TODO
      operationId: findGroup
      responses:
        200:
          description: 'Group found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group not found.'
    put:
      tags:
      - groups
      summary: 'Update group.'
      description: TODO
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        200:
          description: 'Group updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group not found.'
        409:
          description: 'Group with name already exists.'
    delete:
      tags:
      - groups
      summary: 'Delete group.'
      description: TODO
      operationId: deleteGroup
      responses:
        204:
          description: 'Group deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group not found.'
  /gateways:
    get:
      tags:
      - gateways
      summary: 'Find gateways.'
      description: 'Returns all gateways ordered by name.'
      operationId: findGateways
      responses:
        200:
          description: 'Returns gateways.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gateway'
        401:
          description: 'Unauthorized.'
    post:
      tags:
      - gateways
      summary: 'Create gateway.'
      description: TODO
      operationId: createGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayCreate'
      responses:
        201:
          description: 'Gateway created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayDetail'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        409:
          description: 'Gateway with name already exists.'
  /gateways/{gateway_id}:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    get:
      tags:
      - gateways
      summary: 'Find gateway.'
      description: TODO
      operationId: findGateway
      responses:
        200:
          description: 'Returns gateway.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayDetail'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway not found.'
    put:
      tags:
      - gateways
      summary: 'Update gateway.'
      description: TODO
      operationId: updateGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayUpdate'
      responses:
        200:
          description: 'Tenant updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayDetail'
        400:
          description: 'Malformed or group not found.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway not found.'
        409:
          description: 'Gateway with name already exists.'
    delete:
      tags:
      - gateways
      summary: 'Delete gateway.'
      description: TODO
      operationId: deleteGateway
      responses:
        204:
          description: 'Gateway deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway not found.'
  /gateways/{gateway_id}/credentials:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    get:
      tags:
      - credentials
      summary: 'Get credentials for gateway.'
      description: 'Get credentials for gateway.'
      operationId: findCredentials
      responses:
        200:
          description: 'Returns credentials.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway not found.'
    post:
      tags:
      - credentials
      summary: 'Create credential.'
      description: TODO
      operationId: createCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialCreate'
      responses:
        201:
          description: 'Credential created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway not found.'
        409:
          description: 'AuthId for gateway already exists.'
  /gateways/{gateway_id}/credentials/{credential_id}:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    - $ref: '#/components/parameters/CredentialId'
    get:
      tags:
      - credentials
      summary: 'Find credentials.'
      description: TODO
      operationId: findCredential
      responses:
        200:
          description: 'Credential found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway or credential not found.'
    delete:
      tags:
      - credentials
      summary: 'Delete credential.'
      description: TODO
      operationId: deleteCredential
      responses:
        204:
          description: 'Credential deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway or credential not found.'
  /gateways/{gateway_id}/credentials/{credential_id}/secrets:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    - $ref: '#/components/parameters/CredentialId'
    post:
      tags:
      - credentials
      summary: 'Create secret.'
      description: TODO
      operationId: createSecret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreate'
      responses:
        201:
          description: 'Secret created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDetail'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway not found.'
  /gateways/{gateway_id}/credentials/{credential_id}/secrets/{secret_id}:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    - $ref: '#/components/parameters/CredentialId'
    - $ref: '#/components/parameters/SecretId'
    get:
      tags:
      - credentials
      summary: 'Get secret.'
      description: TODO
      operationId: findSecret
      responses:
        200:
          description: 'Secret found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDetail'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway or credential or secret not found.'
    delete:
      tags:
      - credentials
      summary: 'Delete secret.'
      description: TODO
      operationId: deleteSecret
      responses:
        204:
          description: 'Secret deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway or credential or secret not found.'
  /configuration/definition:
    get:
      tags:
      - configuration
      summary: 'Find configuration definitions.'
      description: 'Find configurations definitions.'
      operationId: findConfigurationDefinitions
      responses:
        200:
          description: 'Configuration definitions found.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationDefinition'
        401:
          description: 'Unauthorized.'
  /configuration/definition/{configuration_key}:
    parameters:
    - $ref: '#/components/parameters/ConfigurationKey'
    post:
      tags:
      - configuration
      summary: 'Save configuration definition.'
      description: TODO
      operationId: createConfigurationDefinition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationDefinition'
      responses:
        201:
          description: 'Configuration created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDefinition'
        401:
          description: 'Unauthorized.'
        400:
          description: 'Malformed.'
        409:
          description: 'Key already in use.'
    delete:
      tags:
      - configuration
      summary: 'Delete configuration definition.'
      description: TODO
      operationId: deleteConfigurationDefinition
      responses:
        204:
          description: 'Configuration definition deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Configuration definition not found.'
  /configuration:
    get:
      tags:
      - configuration
      summary: 'Find configurations.'
      description: 'Find configurations on tenant level ordered by key.'
      operationId: findConfigurations
      responses:
        200:
          description: 'Configurations found.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        401:
          description: 'Unauthorized.'
  /configuration/{configuration_key}:
    parameters:
    - $ref: '#/components/parameters/ConfigurationKey'
    put:
      tags:
      - configuration
      summary: 'Save configuration.'
      description: TODO
      operationId: setConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationSet'
      responses:
        204:
          description: 'Configuration set.'
        401:
          description: 'Unauthorized.'
        400:
          description: 'Malformed.'
        404:
          description: 'Configuration not found.'
    delete:
      tags:
      - configuration
      summary: 'Delete configuration.'
      description: TODO
      operationId: resetConfiguration
      responses:
        204:
          description: 'Configuration deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Configuration not found.'
  /groups/{group_id}/configuration:
    parameters:
    - $ref: '#/components/parameters/GroupId'
    get:
      tags:
      - configuration
      summary: 'Find configuration.'
      description: 'Find configurations on group level ordered by key.'
      operationId: findConfigurationsByGroup
      responses:
        200:
          description: 'Configuration found.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group not found.'
  /groups/{group_id}/configuration/{configuration_key}:
    parameters:
    - $ref: '#/components/parameters/GroupId'
    - $ref: '#/components/parameters/ConfigurationKey'
    put:
      tags:
      - configuration
      summary: 'Save configuration value.'
      description: TODO
      operationId: setConfigurationByGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationSet'
      responses:
        204:
          description: 'Configuration set.'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group of configuration key not found.'
    delete:
      tags:
      - configuration
      summary: 'Delete configuration.'
      description: TODO
      operationId: resetConfigurationByGroup
      responses:
        204:
          description: 'Configuration deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group of configuration key not found.'
  /gateway/{gateway_id}/configuration:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    get:
      tags:
      - configuration
      summary: 'Find configuration.'
      description: 'Find configurations on gateway level ordered by key.'
      operationId: findConfigurationsByGateway
      responses:
        200:
          description: 'Configuration found.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuration'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Group not found.'
  /gateway/{gateway_id}/configuration/{configuration_key}:
    parameters:
    - $ref: '#/components/parameters/GatewayId'
    - $ref: '#/components/parameters/ConfigurationKey'
    put:
      tags:
      - configuration
      summary: 'Save configuration value.'
      description: TODO
      operationId: setConfigurationByGateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationSet'
      responses:
        204:
          description: 'Configuration set.'
        400:
          description: 'Malformed.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway of configuration key not found.'
    delete:
      tags:
      - configuration
      summary: 'Delete configuration.'
      description: TODO
      operationId: resetConfigurationByGateway
      responses:
        204:
          description: 'Configuration deleted.'
        401:
          description: 'Unauthorized.'
        404:
          description: 'Gateway of configuration key not found.'

components:
  schemas:
  
    Timestamp:
      description: 'Common timestamp for created/updated timestamps.'
      type: string
      format: date-time
      example: '2021-01-01T00:00:00'    
    Id:
      description: 'Id as technical reference (never changes).'
      type: string
      format: uuid
    Enabled:
      description: 'Flag if enabled or not.'
      type: boolean
      default: true
      example: false

    ###
    ### Tenant
    ###

    TenantName:
      description: 'Human friendly shortname (can change).'
      type: string
      minLength: 3
      maxLength: 20
      pattern: '^[a-zA-Z0-9\-]*$'
      example: kokuwa
    Tenant:
      description: 'Tenant with fields.'
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
      - tenant_id
      - enabled
      - name
      - created
      - updated
    TenantCreate:
      description: 'Tenant to create.'
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          $ref: '#/components/schemas/Enabled'
      required:
      - name
    TenantUpdate:
      description: 'Tenant to update.'
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TenantName'
        enabled:
          $ref: '#/components/schemas/Enabled'

    ###
    ### Group
    ###

    GroupName:
      description: 'Human friendly shortname (can change).'
      type: string
      minLength: 3
      maxLength: 20
      pattern: '^[a-zA-Z0-9\-]*$'
      example: production
    Group:
      description: 'Group with fields.'
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GroupName'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
      - group_id
      - name
      - created
      - updated
    GroupCreate:
      description: 'Group to create.'
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GroupName'
      required:
      - name
    GroupUpdate:
      description: 'Group to update.'
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GroupName'


    ###
    ### Gateway
    ###

    GatewayName:
      description: 'Human friendly shortname (can change).'
      type: string
      minLength: 3
      maxLength: 32
      pattern: '^[a-zA-Z0-9\-]*$'
      example: GW-00001
    GatewayGroups:
      description: 'Ids of groups where gateway is member.'
      type: array
      items:
        $ref: '#/components/schemas/Id'
      uniqueItems: true
      example:
      - 00000000-0000-0000-0000-000000000000
    Gateway:
      description: 'Gateway with common fields.'
      type: object
      properties:
        gateway_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
      - gateway_id
      - enabled
      - name
      - created
      - updated
    GatewayDetail:
      description: 'Gateway with detailed fields.'
      type: object
      properties:
        gateway_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        group_ids:
          $ref: '#/components/schemas/GatewayGroups'
        properties:
          description: 'Properties set by gateway.'
          type: string
          maxLength: 100
          additionalProperties:
            type: string
            maxLength: 1000
          example:
            test-a: this-is-a
            test-b: this-is-b
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
      - gateway_id
      - enabled
      - name
      - group_ids
      - properties
      - created
      - updated
    GatewayCreate:
      description: 'Gateway to create.'
      type: object
      properties:
        gateway_id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        group_ids:
          $ref: '#/components/schemas/GatewayGroups'
      required:
      - name
    GatewayUpdate:
      description: 'Gateway to update.'
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GatewayName'
        enabled:
          $ref: '#/components/schemas/Enabled'
        group_ids:
          $ref: '#/components/schemas/GatewayGroups'

    ###
    ### Credential
    ###

    CredentialAuthId:
      description: 'Auth-ID to identify credentials.'
      type: string
      minLength: 3
      maxLength: 32
      pattern: '^[a-zA-Z0-9\-]*$'
      example: registry
    CredentialType:
      description: 'Types of supported credentials.'
      type: string
      enum:
      - password
      - psk
      - rsa
    Credential:
      properties:
        credential_id:
          $ref: '#/components/schemas/Id'
        auth_id:
          $ref: '#/components/schemas/CredentialAuthId'
        enabled:
          $ref: '#/components/schemas/Enabled'
        type:
          $ref: '#/components/schemas/CredentialType'
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/Secret'
        created:
          $ref: '#/components/schemas/Timestamp'
        updated:
          $ref: '#/components/schemas/Timestamp'
      required:
      - credential_id
      - auth_id
      - enabled
      - type
      - secrets
      - created
      - updated
    CredentialCreate:
      type: object
      properties:
        auth_id:
          $ref: '#/components/schemas/CredentialAuthId'
        enabled:
          $ref: '#/components/schemas/Enabled'
        type:
          $ref: '#/components/schemas/CredentialType'
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretCreate'
      required:
      - auth_id
      - type
      - secrets
    CredentialUpdate:
      type: object
      properties:
        auth_id:
          $ref: '#/components/schemas/CredentialAuthId'
        enabled:
          $ref: '#/components/schemas/Enabled'

    ###
    ### Secret
    ###

    Secret:
      description: 'Secret related to a credentail.'
      type: object
      properties:
        secret_id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/CredentialType'
        created:
          $ref: '#/components/schemas/Timestamp'
      required:
      - secret_id
      - type
      - created
    SecretDetail:
      description: 'Secret related to a credentail with meta informations.'
      type: object
      properties:
        secret_id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/CredentialType'
        created:
          $ref: '#/components/schemas/Timestamp'
      discriminator:
        propertyName: type
        mapping:
          rsa: '#/components/schemas/SecretDetailRSA'
          psk: '#/components/schemas/SecretDetailPSK'
          password: '#/components/schemas/SecretDetailPassword'
      required:
      - secret_id
      - type
      - created
    SecretDetailPSK:
      type: object
      allOf:
      - $ref: '#/components/schemas/SecretDetail'
      - properties:
          secret:
            type: string
            format: byte
        required:
        - secret
    SecretDetailRSA:
      type: object
      allOf:
      - $ref: '#/components/schemas/SecretDetail'
      - properties:
          public_key:
            type: string
            format: byte
          private_key:
            type: string
            format: byte
        required:
        - public_key
    SecretDetailPassword:
      type: object
      allOf:
      - $ref: '#/components/schemas/SecretDetail'
      - properties:
          password:
            type: string
            format: byte
        required:
        - password

    SecretCreate:
      description: 'Create secret.'
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CredentialType'
      discriminator:
        propertyName: type
        mapping:
          rsa: '#/components/schemas/SecretCreateRSA'
          psk: '#/components/schemas/SecretCreatePSK'
          password: '#/components/schemas/SecretCreatePassword'
      required:
      - type
    SecretCreatePSK:
      type: object
      allOf:
      - $ref: '#/components/schemas/SecretCreate'
      - properties:
          secret:
            type: string
            format: byte
        required:
        - secret
    SecretCreateRSA:
      type: object
      allOf:
      - $ref: '#/components/schemas/SecretCreate'
      - properties:
          public_key:
            type: string
            format: byte
          private_key:
            type: string
            format: byte
        required:
        - public_key
    SecretCreatePassword:
      type: object
      allOf:
      - $ref: '#/components/schemas/SecretCreate'
      - properties:
          password:
            type: string
            format: byte
        required:
        - password

    ###
    ### Configuration
    ###

    ConfigurationKey:
      description: 'Key for configuration.'
      type: string
      minLength: 3
      maxLength: 48
      pattern: '^[a-zA-Z0-9\-\.\_]*$'
      example: kokuwa
    ConfigurationType:
      description: 'Possible types of configuration values.'
      enum:
      - INTEGER
      - BOOLEAN
      - STRING
      - URL
    ConfigurationDescription:
      description: 'Describes a configuration.'
      type: string
      maxLength: 200
    ConfigurationDefinition:
      description: 'Defines a configuration.'
      type: object
      properties:
        key:
          $ref: '#/components/schemas/ConfigurationKey'
        type:
          $ref: '#/components/schemas/ConfigurationType'
        description:
          $ref: '#/components/schemas/ConfigurationDescription'
      discriminator:
        propertyName: type
        mapping:
          INTEGER: '#/components/schemas/ConfigurationDefinitionInteger'
          BOOLEAN: '#/components/schemas/ConfigurationDefinitionBoolean'
          STRING: '#/components/schemas/ConfigurationDefinitionString'
          URL: '#/components/schemas/ConfigurationDefinitionUrl'
      required:
      - key
      - type
    ConfigurationDefinitionBoolean:
      type: object
      allOf:
      - $ref: '#/components/schemas/ConfigurationDefinition'
    ConfigurationDefinitionUrl:
      type: object
      allOf:
      - $ref: '#/components/schemas/ConfigurationDefinition'
    ConfigurationDefinitionInteger:
      type: object
      allOf:
      - $ref: '#/components/schemas/ConfigurationDefinition'
      - properties:
          minimum:
            type: integer
            format: int32
          maximum:
            type: integer
            format: int32
    ConfigurationDefinitionString:
      type: object
      allOf:
      - $ref: '#/components/schemas/ConfigurationDefinition'
      - properties:
          minLength:
            type: integer
            format: int32
            minimum: 1
          maxLength:
            type: integer
            format: int32
            maximum: 1000
          pattern:
            type: string
            maxLength: 1000
    ConfigurationValue:
      type: object
    ConfigurationSet:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/ConfigurationValue'
      required:
      - value
    Configuration:
      description: 'Defines a configuration.'
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/ConfigurationDefinition'
        value:
          $ref: '#/components/schemas/ConfigurationValue'
      required:
      - definition
      - value

  parameters:
    TenantId:
      name: tenant_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    GroupId:
      name: group_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    GatewayId:
      name: gateway_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    CredentialId:
      name: credential_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    SecretId:
      name: secret_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    ConfigurationKey:
      name: configuration_key
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ConfigurationKey'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    Keycloak:
      type: openIdConnect
      openIdConnectUrl: http://keycloak:8080/realms/inoa/.well-known/openid-configuration
